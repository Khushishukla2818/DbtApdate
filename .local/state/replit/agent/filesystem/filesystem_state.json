{"file_contents":{"replit.md":{"content":"# DBTGuide - Scholarship Scheme for SC Students\n\n## Project Overview\nA static, responsive multilingual webapp for India's \"Scholarship Scheme for SC Students\" with Direct Benefit Transfer (DBT) guidance. Built with HTML/CSS/JS only, featuring multilingual content, interactive learning flows, and administrative tools.\n\n## Architecture\n- **Frontend**: Static HTML/CSS/JS with government branding\n- **Internationalization**: JSON-based i18n system (English/Hindi)\n- **Static Server**: Python HTTP server on port 5000\n- **Data**: JSON files in `/data/` and `/i18n/` directories\n\n## Features\n- **Multilingual Interface**: English/Hindi with localStorage persistence\n- **Interactive Learning Flows**: Step-by-step Aadhaar→DBT seeding guides\n- **Video Tutorials**: Language-specific educational content\n- **Community Outreach**: Document library with preview/download\n- **Quiz System**: Knowledge testing with scoring\n- **Chatbot**: Multilingual help assistant\n- **Admin Panel**: SMS campaigns and dashboard metrics\n\n## Technical Stack\n- HTML5/CSS3/JavaScript (ES6+)\n- Government of India design standards\n- CSS Grid responsive layout\n- Accessibility features (ARIA, semantic HTML)\n- Client-side routing and state management\n\n## Development Setup\nThe project runs on a Python HTTP server serving static files:\n- Server: Python 3 built-in HTTP server\n- Port: 5000 (configured for Replit environment)\n- Host: 0.0.0.0 (allows external access)\n\n## File Structure\n```\n├── index.html              # Home page\n├── admin.html             # Administrator panel\n├── community.html         # Community outreach\n├── know-difference.html   # Knowledge base\n├── procedure-guide.html   # Interactive guide\n├── quiz.html             # Quiz system\n├── videos.html           # Video tutorials\n├── css/                  # Stylesheets\n├── js/                   # JavaScript modules\n├── i18n/                 # Translation files\n├── data/                 # Static data files\n└── replit.md            # Project documentation\n```\n\n## Deployment Status\n- ✅ Static server running on port 5000\n- ✅ All features functional\n- ✅ Multilingual support active\n- ✅ Responsive design verified\n- ✅ Government branding applied\n\n## Recent Setup\n- **Date**: September 29, 2025\n- **Action**: GitHub import successfully configured for Replit environment\n- **Status**: Production ready\n\n## User Preferences\n- Language: English (default)\n- Theme: Government of India official colors\n- Layout: Responsive grid system","size_bytes":2552},"css/admin.css":{"content":"/* Administrator Panel Specific Styles */\n\n.admin-login {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    min-height: 60vh;\n}\n\n.login-card {\n    background: var(--gov-white);\n    border: 1px solid var(--gov-medium-gray);\n    border-radius: var(--border-radius);\n    padding: var(--spacing-xxl);\n    box-shadow: var(--box-shadow);\n    width: 100%;\n    max-width: 400px;\n}\n\n.login-card h2 {\n    text-align: center;\n    color: var(--gov-blue);\n    margin-bottom: var(--spacing-xl);\n}\n\n.login-info {\n    margin-top: var(--spacing-lg);\n    padding: var(--spacing-md);\n    background-color: var(--gov-light-gray);\n    border-radius: var(--border-radius);\n    font-size: var(--font-size-small);\n    text-align: center;\n}\n\n.admin-panel {\n    margin-top: var(--spacing-lg);\n}\n\n.admin-user {\n    display: flex;\n    align-items: center;\n    gap: var(--spacing-md);\n    color: var(--gov-blue);\n    font-weight: 600;\n}\n\n.admin-tabs .tab-nav {\n    margin-bottom: var(--spacing-xl);\n}\n\n/* Upload Section */\n.upload-section {\n    margin-bottom: var(--spacing-xxl);\n}\n\n.upload-dropzone {\n    border: 2px dashed var(--gov-medium-gray);\n    border-radius: var(--border-radius);\n    padding: var(--spacing-xxl);\n    text-align: center;\n    background-color: var(--gov-light-gray);\n    transition: var(--transition);\n    cursor: pointer;\n}\n\n.upload-dropzone:hover {\n    border-color: var(--gov-orange);\n    background-color: rgba(255, 153, 51, 0.1);\n}\n\n.upload-dropzone.drag-over {\n    border-color: var(--gov-green);\n    background-color: rgba(19, 136, 8, 0.1);\n}\n\n.upload-icon {\n    font-size: 48px;\n    margin-bottom: var(--spacing-md);\n}\n\n.csv-format-info {\n    margin-top: var(--spacing-lg);\n    padding: var(--spacing-md);\n    background-color: var(--gov-light-gray);\n    border-radius: var(--border-radius);\n}\n\n.csv-format-info h4 {\n    color: var(--gov-blue);\n    margin-bottom: var(--spacing-sm);\n}\n\n.csv-format-info p {\n    font-family: monospace;\n    background: var(--gov-white);\n    padding: var(--spacing-sm);\n    border-radius: var(--border-radius);\n    font-size: var(--font-size-small);\n}\n\n/* Students Table */\n.students-table {\n    margin-top: var(--spacing-xl);\n}\n\n.table-controls {\n    display: flex;\n    gap: var(--spacing-md);\n    margin-bottom: var(--spacing-lg);\n    flex-wrap: wrap;\n}\n\n.table-controls input,\n.table-controls select {\n    padding: var(--spacing-sm);\n    border: 1px solid var(--gov-medium-gray);\n    border-radius: var(--border-radius);\n    min-width: 200px;\n}\n\n/* SMS Campaign */\n.sms-campaign {\n    margin-bottom: var(--spacing-xxl);\n}\n\n.campaign-form {\n    background: var(--gov-light-gray);\n    padding: var(--spacing-xl);\n    border-radius: var(--border-radius);\n    margin-bottom: var(--spacing-xl);\n}\n\n.form-row {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n    gap: var(--spacing-lg);\n}\n\n.campaign-preview {\n    margin-top: var(--spacing-lg);\n    padding: var(--spacing-lg);\n    background: var(--gov-white);\n    border-radius: var(--border-radius);\n    border: 1px solid var(--gov-medium-gray);\n}\n\n.preview-stats {\n    margin-bottom: var(--spacing-md);\n    font-weight: 600;\n    color: var(--gov-blue);\n}\n\n.message-preview {\n    background: var(--gov-light-gray);\n    padding: var(--spacing-md);\n    border-radius: var(--border-radius);\n    font-family: monospace;\n    font-size: var(--font-size-small);\n    white-space: pre-wrap;\n}\n\n.campaign-actions {\n    display: flex;\n    gap: var(--spacing-md);\n    margin-top: var(--spacing-lg);\n    justify-content: flex-end;\n}\n\n/* Campaign History */\n.campaign-history {\n    margin-top: var(--spacing-xxl);\n}\n\n.history-filters {\n    margin-bottom: var(--spacing-lg);\n}\n\n.campaign-item {\n    background: var(--gov-white);\n    border: 1px solid var(--gov-medium-gray);\n    border-radius: var(--border-radius);\n    padding: var(--spacing-lg);\n    margin-bottom: var(--spacing-md);\n}\n\n.campaign-header {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin-bottom: var(--spacing-sm);\n}\n\n.campaign-name {\n    font-weight: 600;\n    color: var(--gov-blue);\n}\n\n.campaign-status {\n    padding: var(--spacing-xs) var(--spacing-sm);\n    border-radius: 12px;\n    font-size: var(--font-size-small);\n    font-weight: 600;\n}\n\n.campaign-status.sent {\n    background-color: var(--gov-green);\n    color: var(--gov-white);\n}\n\n.campaign-status.scheduled {\n    background-color: var(--gov-orange);\n    color: var(--gov-white);\n}\n\n.campaign-status.failed {\n    background-color: #dc3545;\n    color: var(--gov-white);\n}\n\n.campaign-meta {\n    font-size: var(--font-size-small);\n    color: var(--gov-dark-gray);\n}\n\n/* Dashboard */\n.dashboard-overview h3 {\n    color: var(--gov-blue);\n    margin-bottom: var(--spacing-xl);\n}\n\n.kpi-cards {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n    gap: var(--spacing-lg);\n    margin-bottom: var(--spacing-xxl);\n}\n\n.kpi-card {\n    background: var(--gov-white);\n    border: 1px solid var(--gov-medium-gray);\n    border-radius: var(--border-radius);\n    padding: var(--spacing-lg);\n    text-align: center;\n    box-shadow: var(--box-shadow);\n}\n\n.kpi-value {\n    font-size: var(--font-size-xxl);\n    font-weight: bold;\n    color: var(--gov-orange);\n    margin-bottom: var(--spacing-sm);\n}\n\n.kpi-label {\n    color: var(--gov-dark-gray);\n    font-size: var(--font-size-small);\n    text-transform: uppercase;\n    letter-spacing: 0.5px;\n}\n\n.dashboard-charts {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));\n    gap: var(--spacing-xl);\n    margin-bottom: var(--spacing-xxl);\n}\n\n.chart-container {\n    background: var(--gov-white);\n    border: 1px solid var(--gov-medium-gray);\n    border-radius: var(--border-radius);\n    padding: var(--spacing-lg);\n}\n\n.chart-container h4 {\n    color: var(--gov-blue);\n    margin-bottom: var(--spacing-lg);\n    text-align: center;\n}\n\n.dashboard-actions {\n    display: flex;\n    gap: var(--spacing-md);\n    justify-content: center;\n}\n\n/* Status badges */\n.status-badge {\n    padding: var(--spacing-xs) var(--spacing-sm);\n    border-radius: 12px;\n    font-size: var(--font-size-small);\n    font-weight: 600;\n    text-transform: uppercase;\n}\n\n.status-badge.pending {\n    background-color: var(--gov-orange);\n    color: var(--gov-white);\n}\n\n.status-badge.completed {\n    background-color: var(--gov-green);\n    color: var(--gov-white);\n}\n\n.status-badge.failed {\n    background-color: #dc3545;\n    color: var(--gov-white);\n}\n\n/* Action buttons */\n.action-buttons {\n    display: flex;\n    gap: var(--spacing-xs);\n}\n\n.btn-sm {\n    padding: var(--spacing-xs) var(--spacing-sm);\n    font-size: var(--font-size-small);\n    border-radius: var(--border-radius);\n}\n\n/* Responsive adjustments */\n@media (max-width: 768px) {\n    .login-card {\n        margin: var(--spacing-md);\n        padding: var(--spacing-lg);\n    }\n    \n    .table-controls {\n        flex-direction: column;\n    }\n    \n    .table-controls input,\n    .table-controls select {\n        min-width: 100%;\n    }\n    \n    .form-row {\n        grid-template-columns: 1fr;\n    }\n    \n    .campaign-actions {\n        flex-direction: column;\n    }\n    \n    .dashboard-charts {\n        grid-template-columns: 1fr;\n    }\n    \n    .chart-container {\n        min-width: 300px;\n    }\n    \n    .dashboard-actions {\n        flex-direction: column;\n        align-items: center;\n    }\n    \n    .kpi-cards {\n        grid-template-columns: repeat(2, 1fr);\n    }\n}","size_bytes":7488},"css/components.css":{"content":"/* Component-specific styles for government website */\n\n/* Chat Widget */\n.chat-widget {\n    position: fixed;\n    bottom: 20px;\n    right: 20px;\n    z-index: 1000;\n}\n\n.chat-toggle {\n    width: 60px;\n    height: 60px;\n    background-color: var(--gov-orange);\n    border-radius: 50%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    cursor: pointer;\n    box-shadow: var(--box-shadow);\n    font-size: 24px;\n    transition: var(--transition);\n}\n\n.chat-toggle:hover {\n    background-color: #E8851F;\n    transform: scale(1.1);\n}\n\n.chat-window {\n    position: absolute;\n    bottom: 70px;\n    right: 0;\n    width: 350px;\n    height: 400px;\n    background: var(--gov-white);\n    border: 1px solid var(--gov-medium-gray);\n    border-radius: var(--border-radius);\n    box-shadow: 0 4px 20px rgba(0,0,0,0.2);\n    display: none;\n    flex-direction: column;\n}\n\n.chat-window.active {\n    display: flex;\n}\n\n.chat-header {\n    background-color: var(--gov-blue);\n    color: var(--gov-white);\n    padding: var(--spacing-md);\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    border-radius: var(--border-radius) var(--border-radius) 0 0;\n}\n\n.chat-close {\n    background: none;\n    border: none;\n    color: var(--gov-white);\n    font-size: 20px;\n    cursor: pointer;\n}\n\n.chat-messages {\n    flex: 1;\n    padding: var(--spacing-md);\n    overflow-y: auto;\n    max-height: 300px;\n}\n\n.chat-message {\n    margin-bottom: var(--spacing-md);\n}\n\n.chat-message.user {\n    text-align: right;\n}\n\n.chat-message.bot {\n    text-align: left;\n}\n\n.message-bubble {\n    display: inline-block;\n    padding: var(--spacing-sm) var(--spacing-md);\n    border-radius: var(--border-radius);\n    max-width: 80%;\n    word-wrap: break-word;\n}\n\n.message-bubble.user {\n    background-color: var(--gov-orange);\n    color: var(--gov-white);\n}\n\n.message-bubble.bot {\n    background-color: var(--gov-light-gray);\n    color: var(--gov-text);\n}\n\n.chat-input {\n    display: flex;\n    padding: var(--spacing-md);\n    border-top: 1px solid var(--gov-medium-gray);\n}\n\n.chat-input input {\n    flex: 1;\n    padding: var(--spacing-sm);\n    border: 1px solid var(--gov-medium-gray);\n    border-radius: var(--border-radius);\n    margin-right: var(--spacing-sm);\n}\n\n.chat-input button {\n    padding: var(--spacing-sm) var(--spacing-md);\n    background-color: var(--gov-blue);\n    color: var(--gov-white);\n    border: none;\n    border-radius: var(--border-radius);\n    cursor: pointer;\n}\n\n/* Knowledge Page Components */\n.knowledge-tabs {\n    margin-top: var(--spacing-xl);\n}\n\n.tab-nav {\n    display: flex;\n    border-bottom: 2px solid var(--gov-medium-gray);\n    margin-bottom: var(--spacing-lg);\n    gap: var(--spacing-sm);\n}\n\n.tab-button {\n    padding: var(--spacing-md) var(--spacing-lg);\n    background: none;\n    border: none;\n    cursor: pointer;\n    font-size: var(--font-size-base);\n    color: var(--gov-text);\n    border-bottom: 3px solid transparent;\n    transition: var(--transition);\n}\n\n.tab-button:hover {\n    background-color: var(--gov-light-gray);\n}\n\n.tab-button.active {\n    color: var(--gov-blue);\n    border-bottom-color: var(--gov-orange);\n    font-weight: 600;\n}\n\n.tab-content {\n    min-height: 400px;\n}\n\n.tab-panel {\n    display: none;\n}\n\n.tab-panel.active {\n    display: block;\n}\n\n.examples {\n    margin: var(--spacing-lg) 0;\n    padding: var(--spacing-lg);\n    background-color: var(--gov-light-gray);\n    border-radius: var(--border-radius);\n}\n\n.examples h4 {\n    color: var(--gov-blue);\n    margin-bottom: var(--spacing-md);\n}\n\n.examples ul {\n    margin-left: var(--spacing-lg);\n}\n\n.examples li {\n    margin-bottom: var(--spacing-sm);\n}\n\n/* FAQ Components */\n.faq-search {\n    margin-bottom: var(--spacing-lg);\n}\n\n.faq-search input {\n    width: 100%;\n    padding: var(--spacing-md);\n    border: 1px solid var(--gov-medium-gray);\n    border-radius: var(--border-radius);\n    font-size: var(--font-size-base);\n}\n\n.faq-accordion .faq-item {\n    border: 1px solid var(--gov-medium-gray);\n    border-radius: var(--border-radius);\n    margin-bottom: var(--spacing-sm);\n    overflow: hidden;\n}\n\n.faq-question {\n    background-color: var(--gov-light-gray);\n    padding: var(--spacing-md);\n    cursor: pointer;\n    font-weight: 600;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    transition: var(--transition);\n}\n\n.faq-question:hover {\n    background-color: var(--gov-medium-gray);\n}\n\n.faq-question.active {\n    background-color: var(--gov-orange);\n    color: var(--gov-white);\n}\n\n.faq-answer {\n    padding: var(--spacing-md);\n    display: none;\n    background-color: var(--gov-white);\n}\n\n.faq-answer.active {\n    display: block;\n}\n\n/* Modal Components */\n.modal {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0,0,0,0.5);\n    display: none;\n    justify-content: center;\n    align-items: center;\n    z-index: 2000;\n}\n\n.modal.active {\n    display: flex;\n}\n\n.modal-content {\n    background: var(--gov-white);\n    padding: var(--spacing-xl);\n    border-radius: var(--border-radius);\n    max-width: 500px;\n    width: 90%;\n    text-align: center;\n}\n\n.modal-buttons {\n    margin-top: var(--spacing-lg);\n    display: flex;\n    gap: var(--spacing-md);\n    justify-content: center;\n}\n\n/* Progress Components */\n.progress-container {\n    margin: var(--spacing-xl) 0;\n}\n\n.progress-bar {\n    height: 4px;\n    background-color: var(--gov-medium-gray);\n    border-radius: 2px;\n    margin-bottom: var(--spacing-lg);\n    position: relative;\n}\n\n.progress-fill {\n    height: 100%;\n    background-color: var(--gov-orange);\n    border-radius: 2px;\n    width: 20%;\n    transition: width 0.3s ease;\n}\n\n.progress-steps {\n    display: flex;\n    justify-content: space-between;\n}\n\n.step {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    opacity: 0.5;\n    transition: var(--transition);\n}\n\n.step.active {\n    opacity: 1;\n}\n\n.step.completed {\n    opacity: 1;\n    color: var(--gov-green);\n}\n\n.step-number {\n    width: 40px;\n    height: 40px;\n    border-radius: 50%;\n    background-color: var(--gov-medium-gray);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-weight: bold;\n    margin-bottom: var(--spacing-sm);\n    transition: var(--transition);\n}\n\n.step.active .step-number {\n    background-color: var(--gov-orange);\n    color: var(--gov-white);\n}\n\n.step.completed .step-number {\n    background-color: var(--gov-green);\n    color: var(--gov-white);\n}\n\n.step-label {\n    font-size: var(--font-size-small);\n    text-align: center;\n    font-weight: 600;\n}\n\n/* Form Components */\n.form-group {\n    margin-bottom: var(--spacing-lg);\n}\n\n.form-label {\n    display: block;\n    margin-bottom: var(--spacing-sm);\n    font-weight: 600;\n    color: var(--gov-text);\n}\n\n.form-input {\n    width: 100%;\n    padding: var(--spacing-md);\n    border: 1px solid var(--gov-medium-gray);\n    border-radius: var(--border-radius);\n    font-size: var(--font-size-base);\n    transition: var(--transition);\n}\n\n.form-input:focus {\n    border-color: var(--gov-orange);\n    outline: none;\n    box-shadow: 0 0 0 2px rgba(255, 153, 51, 0.2);\n}\n\n.form-select {\n    width: 100%;\n    padding: var(--spacing-md);\n    border: 1px solid var(--gov-medium-gray);\n    border-radius: var(--border-radius);\n    font-size: var(--font-size-base);\n    background-color: var(--gov-white);\n}\n\n/* Alert Components */\n.alert {\n    padding: var(--spacing-md);\n    border-radius: var(--border-radius);\n    margin-bottom: var(--spacing-lg);\n    display: flex;\n    align-items: center;\n    gap: var(--spacing-sm);\n}\n\n.alert-success {\n    background-color: #d4edda;\n    color: #155724;\n    border: 1px solid #c3e6cb;\n}\n\n.alert-error {\n    background-color: #f8d7da;\n    color: #721c24;\n    border: 1px solid #f5c6cb;\n}\n\n.alert-warning {\n    background-color: #fff3cd;\n    color: #856404;\n    border: 1px solid #ffeaa7;\n}\n\n.alert-info {\n    background-color: #cce7ff;\n    color: #004085;\n    border: 1px solid #99d6ff;\n}\n\n/* Table Components */\n.table-container {\n    overflow-x: auto;\n    margin: var(--spacing-lg) 0;\n}\n\n.table {\n    width: 100%;\n    border-collapse: collapse;\n    background: var(--gov-white);\n    border-radius: var(--border-radius);\n    overflow: hidden;\n}\n\n.table th,\n.table td {\n    padding: var(--spacing-md);\n    text-align: left;\n    border-bottom: 1px solid var(--gov-medium-gray);\n}\n\n.table th {\n    background-color: var(--gov-blue);\n    color: var(--gov-white);\n    font-weight: 600;\n}\n\n.table tr:hover {\n    background-color: var(--gov-light-gray);\n}\n\n/* Badge Components */\n.badge {\n    display: inline-block;\n    padding: var(--spacing-xs) var(--spacing-sm);\n    border-radius: 12px;\n    font-size: var(--font-size-small);\n    font-weight: 600;\n    text-transform: uppercase;\n    letter-spacing: 0.5px;\n}\n\n.badge-primary {\n    background-color: var(--gov-orange);\n    color: var(--gov-white);\n}\n\n.badge-secondary {\n    background-color: var(--gov-medium-gray);\n    color: var(--gov-text);\n}\n\n.badge-success {\n    background-color: var(--gov-green);\n    color: var(--gov-white);\n}\n\n/* Responsive adjustments for mobile */\n@media (max-width: 768px) {\n    .chat-window {\n        width: 300px;\n        right: 10px;\n        bottom: 70px;\n    }\n    \n    .tab-nav {\n        flex-wrap: wrap;\n    }\n    \n    .tab-button {\n        padding: var(--spacing-sm) var(--spacing-md);\n        font-size: var(--font-size-small);\n    }\n    \n    .progress-steps {\n        gap: var(--spacing-xs);\n    }\n    \n    .step-label {\n        font-size: 12px;\n        max-width: 60px;\n        word-wrap: break-word;\n    }\n    \n    .modal-content {\n        padding: var(--spacing-lg);\n        margin: var(--spacing-md);\n    }\n    \n    .modal-buttons {\n        flex-direction: column;\n    }\n}\n\n/* Status Checker Styles */\n.status-checker-form {\n    background: var(--gov-light-gray);\n    padding: var(--spacing-lg);\n    border-radius: var(--border-radius);\n    margin: var(--spacing-lg) 0;\n}\n\n.form-group {\n    margin-bottom: var(--spacing-lg);\n}\n\n.form-group label {\n    display: block;\n    margin-bottom: var(--spacing-sm);\n    font-weight: 500;\n    color: var(--gov-text);\n}\n\n.form-control {\n    width: 100%;\n    padding: var(--spacing-md);\n    border: 2px solid var(--gov-medium-gray);\n    border-radius: var(--border-radius);\n    font-size: var(--font-size-base);\n    transition: var(--transition);\n}\n\n.form-control:focus {\n    outline: none;\n    border-color: var(--gov-orange);\n    box-shadow: 0 0 0 2px rgba(255, 153, 51, 0.2);\n}\n\n.form-control.error {\n    border-color: #dc3545;\n}\n\n.error-message {\n    display: none;\n    color: #dc3545;\n    font-size: var(--font-size-small);\n    margin-top: var(--spacing-xs);\n}\n\n/* Status Result Styles */\n.status-result {\n    margin-top: var(--spacing-xl);\n    border: 1px solid var(--gov-medium-gray);\n    border-radius: var(--border-radius);\n    overflow: hidden;\n}\n\n.status-card {\n    padding: var(--spacing-lg);\n}\n\n.status-summary {\n    padding: var(--spacing-lg);\n    border-radius: var(--border-radius);\n    margin-bottom: var(--spacing-md);\n}\n\n.status-summary.success {\n    background-color: #d4edda;\n    border: 1px solid #c3e6cb;\n    color: #155724;\n}\n\n.status-summary.warning {\n    background-color: #fff3cd;\n    border: 1px solid #ffeaa7;\n    color: #856404;\n}\n\n.status-summary.error {\n    background-color: #f8d7da;\n    border: 1px solid #f5c6cb;\n    color: #721c24;\n}\n\n.status-badge {\n    display: flex;\n    align-items: center;\n    gap: var(--spacing-md);\n    margin-bottom: var(--spacing-md);\n}\n\n.status-icon {\n    font-size: 24px;\n}\n\n.status-label {\n    font-size: var(--font-size-large);\n    font-weight: bold;\n}\n\n.status-details {\n    display: grid;\n    gap: var(--spacing-sm);\n}\n\n.status-details p {\n    margin: 0;\n    padding: var(--spacing-xs) 0;\n    border-bottom: 1px solid rgba(0,0,0,0.1);\n}\n\n.status-details p:last-child {\n    border-bottom: none;\n}\n\n.status-message {\n    background-color: var(--gov-light-gray);\n    padding: var(--spacing-md);\n    border-radius: var(--border-radius);\n    margin: var(--spacing-md) 0;\n}\n\n.next-steps {\n    margin-top: var(--spacing-md);\n}\n\n.next-steps h5 {\n    color: var(--gov-blue);\n    margin-bottom: var(--spacing-sm);\n}\n\n.next-steps ul {\n    padding-left: var(--spacing-lg);\n}\n\n.next-steps li {\n    margin-bottom: var(--spacing-xs);\n    line-height: 1.4;\n}\n\n.status-actions {\n    display: flex;\n    gap: var(--spacing-md);\n    margin-top: var(--spacing-lg);\n    flex-wrap: wrap;\n}\n\n/* Loading Spinner */\n.loading-spinner {\n    display: inline-block;\n    width: 16px;\n    height: 16px;\n    border: 2px solid var(--gov-white);\n    border-radius: 50%;\n    border-top: 2px solid transparent;\n    animation: spin 1s linear infinite;\n    margin-right: var(--spacing-xs);\n}\n\n@keyframes spin {\n    0% { transform: rotate(0deg); }\n    100% { transform: rotate(360deg); }\n}\n\n/* Mobile Responsiveness for Status Checker */\n@media (max-width: 768px) {\n    .status-checker-form {\n        padding: var(--spacing-md);\n    }\n    \n    .status-actions {\n        flex-direction: column;\n    }\n    \n    .status-actions .btn {\n        width: 100%;\n    }\n    \n    .status-badge {\n        flex-direction: column;\n        text-align: center;\n        gap: var(--spacing-sm);\n    }\n}","size_bytes":13257},"css/main.css":{"content":"/* Government of India Color Scheme and Typography */\n:root {\n    /* Official Government Colors */\n    --gov-orange: #FF9933;\n    --gov-white: #FFFFFF; \n    --gov-green: #138808;\n    --gov-blue: #000080;\n    --gov-text: #333333;\n    --gov-light-gray: #F5F5F5;\n    --gov-medium-gray: #E0E0E0;\n    --gov-dark-gray: #666666;\n    \n    /* Layout Variables */\n    --container-width: 1200px;\n    --header-height: 120px;\n    --nav-height: 60px;\n    --border-radius: 4px;\n    --box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n    --transition: all 0.3s ease;\n    \n    /* Typography */\n    --font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n    --font-size-base: 16px;\n    --font-size-small: 14px;\n    --font-size-large: 18px;\n    --font-size-xl: 24px;\n    --font-size-xxl: 32px;\n    \n    /* Spacing */\n    --spacing-xs: 4px;\n    --spacing-sm: 8px;\n    --spacing-md: 16px;\n    --spacing-lg: 24px;\n    --spacing-xl: 32px;\n    --spacing-xxl: 48px;\n}\n\n/* CSS Grid System */\n.container {\n    max-width: var(--container-width);\n    margin: 0 auto;\n    padding: 0 var(--spacing-md);\n}\n\n.grid {\n    display: grid;\n    gap: var(--spacing-md);\n}\n\n.grid-2 { grid-template-columns: repeat(2, 1fr); }\n.grid-3 { grid-template-columns: repeat(3, 1fr); }\n.grid-4 { grid-template-columns: repeat(4, 1fr); }\n\n@media (max-width: 768px) {\n    .grid-2, .grid-3, .grid-4 {\n        grid-template-columns: 1fr;\n    }\n}\n\n/* Reset and Base Styles */\n* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\nhtml {\n    font-size: var(--font-size-base);\n    scroll-behavior: smooth;\n}\n\nbody {\n    font-family: var(--font-family);\n    line-height: 1.6;\n    color: var(--gov-text);\n    background-color: var(--gov-white);\n}\n\n/* RTL Support */\n[dir=\"rtl\"] {\n    text-align: right;\n}\n\n[dir=\"rtl\"] .nav-list {\n    flex-direction: row-reverse;\n}\n\n/* Accessibility */\n*:focus {\n    outline: 2px solid var(--gov-orange);\n    outline-offset: 2px;\n}\n\n.sr-only {\n    position: absolute;\n    width: 1px;\n    height: 1px;\n    padding: 0;\n    margin: -1px;\n    overflow: hidden;\n    clip: rect(0, 0, 0, 0);\n    white-space: nowrap;\n    border: 0;\n}\n\n/* Header Styles */\n.header {\n    background: linear-gradient(135deg, var(--gov-orange) 0%, var(--gov-white) 50%, var(--gov-green) 100%);\n    padding: var(--spacing-md) 0;\n    box-shadow: var(--box-shadow);\n}\n\n.header-content {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin-bottom: var(--spacing-md);\n}\n\n.logo-section {\n    display: flex;\n    align-items: center;\n    gap: var(--spacing-md);\n}\n\n.govt-logo {\n    width: 60px;\n    height: 60px;\n    /* Government branding with Indian flag */\n    background: linear-gradient(45deg, var(--gov-orange), var(--gov-green));\n    border-radius: 50%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    color: white;\n    font-weight: bold;\n    font-size: 30px;\n    flex-shrink: 0;\n    text-decoration: none;\n}\n\n.site-title h1 {\n    font-size: var(--font-size-xxl);\n    font-weight: bold;\n    color: var(--gov-blue);\n    margin: 0;\n}\n\n.site-title p {\n    font-size: var(--font-size-base);\n    color: var(--gov-dark-gray);\n    margin: 0;\n}\n\n.header-controls {\n    display: flex;\n    align-items: center;\n    gap: var(--spacing-md);\n}\n\n.language-switcher select {\n    padding: var(--spacing-sm);\n    border: 1px solid var(--gov-medium-gray);\n    border-radius: var(--border-radius);\n    font-size: var(--font-size-base);\n    background: var(--gov-white);\n}\n\n/* Navigation */\n.main-nav {\n    background-color: var(--gov-blue);\n    border-radius: var(--border-radius);\n}\n\n.nav-list {\n    display: flex;\n    list-style: none;\n    margin: 0;\n    padding: 0;\n}\n\n.nav-list li {\n    flex: 1;\n}\n\n.nav-list a {\n    display: block;\n    padding: var(--spacing-md);\n    color: var(--gov-white);\n    text-decoration: none;\n    text-align: center;\n    transition: var(--transition);\n    font-weight: 500;\n}\n\n.nav-list a:hover,\n.nav-list a.active {\n    background-color: var(--gov-orange);\n    color: var(--gov-white);\n}\n\n/* Main Content */\n.main-content {\n    min-height: calc(100vh - var(--header-height) - var(--nav-height) - 200px);\n    padding: var(--spacing-xl) 0;\n}\n\n/* Hero Section */\n.hero-section {\n    background: linear-gradient(135deg, rgba(255, 153, 51, 0.1) 0%, rgba(19, 136, 8, 0.1) 100%);\n    padding: var(--spacing-xxl) 0;\n    margin-bottom: var(--spacing-xl);\n    border-radius: var(--border-radius);\n}\n\n.hero-content {\n    text-align: center;\n}\n\n.hero-title {\n    font-size: var(--font-size-xxl);\n    color: var(--gov-blue);\n    margin-bottom: var(--spacing-md);\n    font-weight: bold;\n}\n\n.hero-subtitle {\n    font-size: var(--font-size-large);\n    color: var(--gov-dark-gray);\n    margin-bottom: var(--spacing-xl);\n}\n\n.hero-buttons {\n    display: flex;\n    gap: var(--spacing-md);\n    justify-content: center;\n    flex-wrap: wrap;\n}\n\n/* Buttons */\n.btn {\n    display: inline-block;\n    padding: var(--spacing-md) var(--spacing-xl);\n    border: none;\n    border-radius: var(--border-radius);\n    text-decoration: none;\n    text-align: center;\n    cursor: pointer;\n    transition: var(--transition);\n    font-size: var(--font-size-base);\n    font-weight: 500;\n}\n\n.btn-primary {\n    background-color: var(--gov-orange);\n    color: var(--gov-white);\n}\n\n.btn-primary:hover {\n    background-color: #E8851F;\n}\n\n.btn-secondary {\n    background-color: var(--gov-green);\n    color: var(--gov-white);\n}\n\n.btn-secondary:hover {\n    background-color: #0F6B06;\n}\n\n.btn-success {\n    background-color: var(--gov-blue);\n    color: var(--gov-white);\n}\n\n.btn-success:hover {\n    background-color: #000066;\n}\n\n.btn:disabled {\n    opacity: 0.6;\n    cursor: not-allowed;\n}\n\n/* Cards and Blocks */\n.info-card, .feature-card, .knowledge-card {\n    background: var(--gov-white);\n    border: 1px solid var(--gov-medium-gray);\n    border-radius: var(--border-radius);\n    padding: var(--spacing-lg);\n    box-shadow: var(--box-shadow);\n    transition: var(--transition);\n}\n\n.info-card:hover, .feature-card:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 4px 8px rgba(0,0,0,0.15);\n}\n\n.blocks-grid, .features-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n    gap: var(--spacing-lg);\n    margin-top: var(--spacing-lg);\n}\n\n.feature-card {\n    text-decoration: none;\n    color: inherit;\n    text-align: center;\n}\n\n.feature-icon {\n    font-size: 48px;\n    margin-bottom: var(--spacing-md);\n}\n\n.card-link {\n    color: var(--gov-blue);\n    text-decoration: none;\n    font-weight: 500;\n}\n\n.card-link:hover {\n    text-decoration: underline;\n}\n\n/* Sections */\n.important-blocks, .recent-updates, .feature-blocks {\n    margin-bottom: var(--spacing-xxl);\n}\n\n.important-blocks h3, .recent-updates h3 {\n    font-size: var(--font-size-xl);\n    color: var(--gov-blue);\n    margin-bottom: var(--spacing-lg);\n    text-align: center;\n}\n\n/* Updates Carousel */\n.updates-carousel {\n    display: flex;\n    gap: var(--spacing-md);\n    overflow-x: auto;\n    padding: var(--spacing-md) 0;\n    scroll-snap-type: x mandatory;\n}\n\n.update-item {\n    min-width: 300px;\n    flex-shrink: 0;\n    background: var(--gov-white);\n    border: 1px solid var(--gov-medium-gray);\n    border-radius: var(--border-radius);\n    padding: var(--spacing-lg);\n    scroll-snap-align: start;\n}\n\n.update-date {\n    color: var(--gov-dark-gray);\n    font-size: var(--font-size-small);\n    margin-bottom: var(--spacing-sm);\n}\n\n/* Footer */\n.footer {\n    background-color: var(--gov-blue);\n    color: var(--gov-white);\n    padding: var(--spacing-xl) 0;\n    margin-top: var(--spacing-xxl);\n}\n\n.footer-content {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n    gap: var(--spacing-lg);\n}\n\n.footer-section h5 {\n    color: var(--gov-orange);\n    margin-bottom: var(--spacing-md);\n}\n\n.footer-section a {\n    color: var(--gov-white);\n    text-decoration: none;\n    display: block;\n    margin-bottom: var(--spacing-sm);\n}\n\n.footer-section a:hover {\n    text-decoration: underline;\n}\n\n/* Breadcrumb */\n.breadcrumb {\n    margin-bottom: var(--spacing-lg);\n    font-size: var(--font-size-small);\n    color: var(--gov-dark-gray);\n}\n\n.breadcrumb a {\n    color: var(--gov-blue);\n    text-decoration: none;\n}\n\n.breadcrumb a:hover {\n    text-decoration: underline;\n}\n\n/* Page Title */\n.page-title {\n    font-size: var(--font-size-xxl);\n    color: var(--gov-blue);\n    margin-bottom: var(--spacing-md);\n}\n\n.page-intro {\n    font-size: var(--font-size-large);\n    color: var(--gov-dark-gray);\n    margin-bottom: var(--spacing-xl);\n}\n\n/* Responsive Design */\n@media (max-width: 768px) {\n    .header-content {\n        flex-direction: column;\n        gap: var(--spacing-md);\n    }\n    \n    .nav-list {\n        flex-wrap: wrap;\n    }\n    \n    .nav-list a {\n        padding: var(--spacing-sm);\n        font-size: var(--font-size-small);\n    }\n    \n    .hero-title {\n        font-size: var(--font-size-xl);\n    }\n    \n    .hero-buttons {\n        flex-direction: column;\n        align-items: center;\n    }\n    \n    .btn {\n        width: 100%;\n        max-width: 300px;\n    }\n}\n\n/* Loading and State Indicators */\n.loading {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    padding: var(--spacing-xl);\n}\n\n.loading::after {\n    content: '';\n    width: 40px;\n    height: 40px;\n    border: 3px solid var(--gov-medium-gray);\n    border-top: 3px solid var(--gov-orange);\n    border-radius: 50%;\n    animation: spin 1s linear infinite;\n}\n\n@keyframes spin {\n    0% { transform: rotate(0deg); }\n    100% { transform: rotate(360deg); }\n}\n\n/* Utility Classes */\n.text-center { text-align: center; }\n.text-left { text-align: left; }\n.text-right { text-align: right; }\n.hidden { display: none; }\n.visible { display: block; }\n.mb-sm { margin-bottom: var(--spacing-sm); }\n.mb-md { margin-bottom: var(--spacing-md); }\n.mb-lg { margin-bottom: var(--spacing-lg); }\n.mt-sm { margin-top: var(--spacing-sm); }\n.mt-md { margin-top: var(--spacing-md); }\n.mt-lg { margin-top: var(--spacing-lg); }","size_bytes":10011},"css/procedure.css":{"content":"/* Procedure Guide Specific Styles */\n\n.procedure-selector {\n    margin: var(--spacing-xl) 0;\n    text-align: center;\n}\n\n.case-buttons {\n    display: flex;\n    gap: var(--spacing-md);\n    justify-content: center;\n    margin-top: var(--spacing-lg);\n    flex-wrap: wrap;\n}\n\n.case-btn {\n    padding: var(--spacing-md) var(--spacing-xl);\n    border: 2px solid var(--gov-medium-gray);\n    background: var(--gov-white);\n    color: var(--gov-text);\n    border-radius: var(--border-radius);\n    cursor: pointer;\n    transition: var(--transition);\n    font-size: var(--font-size-base);\n    font-weight: 600;\n}\n\n.case-btn:hover {\n    border-color: var(--gov-orange);\n    background-color: var(--gov-light-gray);\n}\n\n.case-btn.active {\n    background-color: var(--gov-orange);\n    color: var(--gov-white);\n    border-color: var(--gov-orange);\n}\n\n.procedure-content {\n    display: grid;\n    grid-template-columns: 2fr 1fr;\n    gap: var(--spacing-xl);\n    margin: var(--spacing-xl) 0;\n}\n\n.step-content {\n    background: var(--gov-white);\n    border: 1px solid var(--gov-medium-gray);\n    border-radius: var(--border-radius);\n    padding: var(--spacing-xl);\n    min-height: 400px;\n}\n\n.side-checklist {\n    background: var(--gov-light-gray);\n    border: 1px solid var(--gov-medium-gray);\n    border-radius: var(--border-radius);\n    padding: var(--spacing-lg);\n}\n\n.side-checklist h4 {\n    color: var(--gov-blue);\n    margin-bottom: var(--spacing-md);\n    font-size: var(--font-size-large);\n}\n\n.checklist {\n    list-style: none;\n    padding: 0;\n    margin: 0;\n}\n\n.checklist li {\n    display: flex;\n    align-items: center;\n    gap: var(--spacing-sm);\n    padding: var(--spacing-sm) 0;\n    border-bottom: 1px solid var(--gov-medium-gray);\n}\n\n.checklist li:last-child {\n    border-bottom: none;\n}\n\n.checklist-icon {\n    width: 20px;\n    height: 20px;\n    border-radius: 50%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-size: 12px;\n    font-weight: bold;\n}\n\n.checklist-icon.pending {\n    background-color: var(--gov-medium-gray);\n    color: var(--gov-white);\n}\n\n.checklist-icon.completed {\n    background-color: var(--gov-green);\n    color: var(--gov-white);\n}\n\n.procedure-controls {\n    display: flex;\n    gap: var(--spacing-md);\n    justify-content: center;\n    margin-top: var(--spacing-xl);\n}\n\n/* Step Content Layouts */\n.step-portal {\n    text-align: center;\n}\n\n.portal-screenshot {\n    width: 100%;\n    max-width: 500px;\n    border: 1px solid var(--gov-medium-gray);\n    border-radius: var(--border-radius);\n    margin: var(--spacing-lg) 0;\n}\n\n.portal-link {\n    display: inline-block;\n    background-color: var(--gov-blue);\n    color: var(--gov-white);\n    padding: var(--spacing-md) var(--spacing-xl);\n    text-decoration: none;\n    border-radius: var(--border-radius);\n    margin: var(--spacing-md) 0;\n    font-weight: 600;\n}\n\n.portal-link:hover {\n    background-color: #000066;\n}\n\n.form-simulation {\n    max-width: 600px;\n    margin: 0 auto;\n}\n\n.sim-form {\n    background: var(--gov-light-gray);\n    padding: var(--spacing-lg);\n    border-radius: var(--border-radius);\n    border: 2px dashed var(--gov-medium-gray);\n}\n\n.sim-form h4 {\n    color: var(--gov-blue);\n    margin-bottom: var(--spacing-md);\n    text-align: center;\n}\n\n.sim-disclaimer {\n    background-color: var(--gov-orange);\n    color: var(--gov-white);\n    padding: var(--spacing-sm);\n    border-radius: var(--border-radius);\n    text-align: center;\n    margin-bottom: var(--spacing-md);\n    font-size: var(--font-size-small);\n    font-weight: 600;\n}\n\n.aadhaar-input {\n    position: relative;\n}\n\n.aadhaar-input input {\n    font-family: monospace;\n    letter-spacing: 2px;\n    font-size: var(--font-size-large);\n    text-align: center;\n}\n\n.format-hint {\n    font-size: var(--font-size-small);\n    color: var(--gov-dark-gray);\n    text-align: center;\n    margin-top: var(--spacing-sm);\n}\n\n.validation-message {\n    margin-top: var(--spacing-sm);\n    padding: var(--spacing-sm);\n    border-radius: var(--border-radius);\n    font-size: var(--font-size-small);\n}\n\n.validation-message.success {\n    background-color: #d4edda;\n    color: #155724;\n    border: 1px solid #c3e6cb;\n}\n\n.validation-message.error {\n    background-color: #f8d7da;\n    color: #721c24;\n    border: 1px solid #f5c6cb;\n}\n\n.bank-selection {\n    margin-bottom: var(--spacing-lg);\n}\n\n.popular-banks {\n    display: grid;\n    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n    gap: var(--spacing-sm);\n    margin-top: var(--spacing-md);\n}\n\n.bank-option {\n    padding: var(--spacing-sm);\n    border: 1px solid var(--gov-medium-gray);\n    border-radius: var(--border-radius);\n    text-align: center;\n    cursor: pointer;\n    transition: var(--transition);\n}\n\n.bank-option:hover {\n    background-color: var(--gov-light-gray);\n    border-color: var(--gov-orange);\n}\n\n.bank-option.selected {\n    background-color: var(--gov-orange);\n    color: var(--gov-white);\n    border-color: var(--gov-orange);\n}\n\n.ifsc-input {\n    position: relative;\n}\n\n.ifsc-format {\n    font-family: monospace;\n    text-transform: uppercase;\n}\n\n.confirmation-summary {\n    background: var(--gov-light-gray);\n    border: 1px solid var(--gov-medium-gray);\n    border-radius: var(--border-radius);\n    padding: var(--spacing-lg);\n    margin: var(--spacing-lg) 0;\n}\n\n.summary-section {\n    margin-bottom: var(--spacing-md);\n    padding-bottom: var(--spacing-md);\n    border-bottom: 1px solid var(--gov-medium-gray);\n}\n\n.summary-section:last-child {\n    border-bottom: none;\n    margin-bottom: 0;\n}\n\n.summary-label {\n    font-weight: 600;\n    color: var(--gov-blue);\n    display: block;\n    margin-bottom: var(--spacing-xs);\n}\n\n.summary-value {\n    font-family: monospace;\n    background: var(--gov-white);\n    padding: var(--spacing-xs);\n    border-radius: var(--border-radius);\n}\n\n.simulation-result {\n    text-align: center;\n    padding: var(--spacing-xl);\n}\n\n.result-icon {\n    font-size: 64px;\n    margin-bottom: var(--spacing-md);\n}\n\n.result-success {\n    color: var(--gov-green);\n}\n\n.result-failure {\n    color: #dc3545;\n}\n\n.result-message {\n    font-size: var(--font-size-large);\n    font-weight: 600;\n    margin-bottom: var(--spacing-md);\n}\n\n.result-details {\n    color: var(--gov-dark-gray);\n    max-width: 400px;\n    margin: 0 auto;\n}\n\n/* Responsive Design for Procedure Guide */\n@media (max-width: 768px) {\n    .case-buttons {\n        flex-direction: column;\n        align-items: center;\n    }\n    \n    .case-btn {\n        width: 100%;\n        max-width: 300px;\n    }\n    \n    .procedure-content {\n        grid-template-columns: 1fr;\n        gap: var(--spacing-lg);\n    }\n    \n    .side-checklist {\n        order: -1;\n    }\n    \n    .procedure-controls {\n        flex-direction: column;\n        align-items: center;\n    }\n    \n    .popular-banks {\n        grid-template-columns: 1fr;\n    }\n    \n    .progress-steps {\n        justify-content: flex-start;\n        overflow-x: auto;\n        gap: var(--spacing-lg);\n        padding-bottom: var(--spacing-md);\n    }\n    \n    .step {\n        flex-shrink: 0;\n        min-width: 80px;\n    }\n}\n\n/* Special animations for procedure guide */\n.step-content.fade-in {\n    animation: fadeIn 0.3s ease-in-out;\n}\n\n@keyframes fadeIn {\n    from {\n        opacity: 0;\n        transform: translateY(10px);\n    }\n    to {\n        opacity: 1;\n        transform: translateY(0);\n    }\n}\n\n.checklist-icon.animate {\n    animation: checkComplete 0.5s ease-in-out;\n}\n\n@keyframes checkComplete {\n    0% { transform: scale(1); }\n    50% { transform: scale(1.2); }\n    100% { transform: scale(1); }\n}","size_bytes":7560},"js/admin.js":{"content":"// Administrator Panel JavaScript\nclass AdminManager {\n    constructor() {\n        this.isLoggedIn = false;\n        this.students = [];\n        this.campaigns = [];\n        this.dashboardData = {\n            totalStudents: 0,\n            messagesSent: 0,\n            deliveryRate: 0,\n            activeCampaigns: 0\n        };\n        this.currentTab = 'students';\n        this.init();\n    }\n\n    init() {\n        this.checkLoginStatus();\n        this.setupEventListeners();\n        this.loadMockData();\n        this.updateDashboard();\n    }\n\n    checkLoginStatus() {\n        // Check if user is already logged in (stored in localStorage for demo)\n        this.isLoggedIn = localStorage.getItem('adminLoggedIn') === 'true';\n        this.showAppropriateView();\n    }\n\n    showAppropriateView() {\n        const loginSection = document.getElementById('adminLogin');\n        const panelSection = document.getElementById('adminPanel');\n        const adminUser = document.getElementById('adminUser');\n\n        if (this.isLoggedIn) {\n            if (loginSection) loginSection.style.display = 'none';\n            if (panelSection) panelSection.classList.remove('hidden');\n            if (adminUser) adminUser.style.display = 'flex';\n        } else {\n            if (loginSection) loginSection.style.display = 'block';\n            if (panelSection) panelSection.classList.add('hidden');\n            if (adminUser) adminUser.style.display = 'none';\n        }\n    }\n\n    setupEventListeners() {\n        // Login form\n        const loginForm = document.getElementById('loginForm');\n        if (loginForm) {\n            loginForm.addEventListener('submit', (e) => {\n                e.preventDefault();\n                this.handleLogin();\n            });\n        }\n\n        // Logout button\n        const logoutBtn = document.getElementById('logoutBtn');\n        if (logoutBtn) {\n            logoutBtn.addEventListener('click', () => {\n                this.handleLogout();\n            });\n        }\n\n        // Tab navigation\n        const tabButtons = document.querySelectorAll('.admin-tabs .tab-button');\n        tabButtons.forEach(button => {\n            button.addEventListener('click', (e) => {\n                const tabId = e.target.getAttribute('data-tab');\n                this.switchTab(tabId);\n            });\n        });\n\n        // CSV Upload\n        this.setupCsvUpload();\n\n        // SMS Campaign\n        this.setupSmsHandlers();\n\n        // Dashboard\n        this.setupDashboardHandlers();\n\n        // Student management\n        this.setupStudentHandlers();\n    }\n\n    handleLogin() {\n        // Demo login - accept any credentials\n        this.isLoggedIn = true;\n        localStorage.setItem('adminLoggedIn', 'true');\n        \n        const adminName = document.getElementById('adminName');\n        if (adminName) {\n            adminName.textContent = 'Administrator';\n        }\n        \n        this.showAppropriateView();\n        this.showNotification('Login successful', 'success');\n    }\n\n    handleLogout() {\n        this.isLoggedIn = false;\n        localStorage.removeItem('adminLoggedIn');\n        this.showAppropriateView();\n        this.showNotification('Logged out successfully', 'info');\n    }\n\n    switchTab(tabId) {\n        // Update tab buttons\n        const tabButtons = document.querySelectorAll('.admin-tabs .tab-button');\n        tabButtons.forEach(btn => btn.classList.remove('active'));\n        document.querySelector(`[data-tab=\"${tabId}\"]`).classList.add('active');\n\n        // Update tab panels\n        const tabPanels = document.querySelectorAll('.admin-tabs .tab-panel');\n        tabPanels.forEach(panel => panel.classList.remove('active'));\n        document.getElementById(tabId).classList.add('active');\n\n        this.currentTab = tabId;\n\n        // Load tab-specific data\n        switch (tabId) {\n            case 'students':\n                this.renderStudentsTable();\n                break;\n            case 'sms':\n                this.renderCampaignHistory();\n                break;\n            case 'dashboard':\n                this.renderDashboard();\n                break;\n        }\n    }\n\n    setupCsvUpload() {\n        const csvUpload = document.getElementById('csvUpload');\n        const uploadDropzone = document.getElementById('uploadDropzone');\n\n        if (csvUpload) {\n            csvUpload.addEventListener('change', (e) => {\n                this.handleCsvUpload(e.target.files[0]);\n            });\n        }\n\n        if (uploadDropzone) {\n            // Drag and drop functionality\n            uploadDropzone.addEventListener('dragover', (e) => {\n                e.preventDefault();\n                uploadDropzone.classList.add('drag-over');\n            });\n\n            uploadDropzone.addEventListener('dragleave', () => {\n                uploadDropzone.classList.remove('drag-over');\n            });\n\n            uploadDropzone.addEventListener('drop', (e) => {\n                e.preventDefault();\n                uploadDropzone.classList.remove('drag-over');\n                const file = e.dataTransfer.files[0];\n                if (file && file.type === 'text/csv') {\n                    this.handleCsvUpload(file);\n                } else {\n                    this.showNotification('Please upload a CSV file', 'error');\n                }\n            });\n        }\n    }\n\n    handleCsvUpload(file) {\n        if (!file) return;\n\n        const reader = new FileReader();\n        reader.onload = (e) => {\n            try {\n                const csv = e.target.result;\n                const students = this.parseCsv(csv);\n                this.importStudents(students);\n                this.showNotification(`Imported ${students.length} students successfully`, 'success');\n            } catch (error) {\n                this.showNotification('Error parsing CSV file', 'error');\n            }\n        };\n        reader.readAsText(file);\n    }\n\n    parseCsv(csv) {\n        const lines = csv.split('\\n').filter(line => line.trim());\n        const headers = lines[0].split(',');\n        const students = [];\n\n        for (let i = 1; i < lines.length; i++) {\n            const values = lines[i].split(',');\n            if (values.length >= headers.length) {\n                const student = {\n                    id: Date.now() + i,\n                    studentId: values[0]?.trim(),\n                    name: values[1]?.trim(),\n                    phone: values[2]?.trim(),\n                    lang: values[3]?.trim() || 'en',\n                    aadhaar: values[4]?.trim(),\n                    bankAccount: values[5]?.trim(),\n                    ifsc: values[6]?.trim(),\n                    scholarshipType: values[7]?.trim(),\n                    email: values[8]?.trim(),\n                    status: 'pending',\n                    uploadDate: new Date().toISOString()\n                };\n                students.push(student);\n            }\n        }\n\n        return students;\n    }\n\n    importStudents(newStudents) {\n        this.students = [...this.students, ...newStudents];\n        this.updateDashboard();\n        this.renderStudentsTable();\n        \n        // Save to localStorage for demo\n        localStorage.setItem('adminStudents', JSON.stringify(this.students));\n    }\n\n    setupStudentHandlers() {\n        const studentSearch = document.getElementById('studentSearch');\n        const scholarshipFilter = document.getElementById('scholarshipFilter');\n\n        if (studentSearch) {\n            studentSearch.addEventListener('input', () => {\n                this.renderStudentsTable();\n            });\n        }\n\n        if (scholarshipFilter) {\n            scholarshipFilter.addEventListener('change', () => {\n                this.renderStudentsTable();\n            });\n        }\n    }\n\n    renderStudentsTable() {\n        const tableBody = document.getElementById('studentsTableBody');\n        if (!tableBody) return;\n\n        const searchTerm = document.getElementById('studentSearch')?.value.toLowerCase() || '';\n        const scholarshipFilter = document.getElementById('scholarshipFilter')?.value || 'all';\n\n        let filteredStudents = this.students.filter(student => {\n            const matchesSearch = !searchTerm || \n                student.name.toLowerCase().includes(searchTerm) ||\n                student.studentId.toLowerCase().includes(searchTerm) ||\n                student.phone.includes(searchTerm);\n            \n            const matchesFilter = scholarshipFilter === 'all' || \n                student.scholarshipType === scholarshipFilter;\n\n            return matchesSearch && matchesFilter;\n        });\n\n        if (filteredStudents.length === 0) {\n            tableBody.innerHTML = `\n                <tr>\n                    <td colspan=\"6\" style=\"text-align: center; padding: 2rem;\">\n                        No students found matching criteria\n                    </td>\n                </tr>\n            `;\n            return;\n        }\n\n        tableBody.innerHTML = filteredStudents.map(student => `\n            <tr>\n                <td>${student.studentId}</td>\n                <td>${student.name}</td>\n                <td>${student.phone}</td>\n                <td>${student.scholarshipType}</td>\n                <td><span class=\"status-badge ${student.status}\">${this.capitalizeFirst(student.status)}</span></td>\n                <td>\n                    <div class=\"action-buttons\">\n                        <button class=\"btn btn-sm btn-secondary\" onclick=\"adminManager.editStudent('${student.id}')\">Edit</button>\n                        <button class=\"btn btn-sm btn-primary\" onclick=\"adminManager.sendSingleSms('${student.id}')\">SMS</button>\n                    </div>\n                </td>\n            </tr>\n        `).join('');\n    }\n\n    setupSmsHandlers() {\n        const previewBtn = document.getElementById('previewCampaign');\n        const sendBtn = document.getElementById('sendCampaign');\n        const messageTemplate = document.getElementById('messageTemplate');\n        const targetLanguage = document.getElementById('targetLanguage');\n        const targetScholarship = document.getElementById('targetScholarship');\n\n        if (previewBtn) {\n            previewBtn.addEventListener('click', () => {\n                this.previewCampaign();\n            });\n        }\n\n        if (sendBtn) {\n            sendBtn.addEventListener('click', () => {\n                this.sendCampaign();\n            });\n        }\n\n        // Auto-update preview when inputs change\n        [messageTemplate, targetLanguage, targetScholarship].forEach(element => {\n            if (element) {\n                element.addEventListener('input', () => {\n                    this.updateCampaignPreview();\n                });\n                element.addEventListener('change', () => {\n                    this.updateCampaignPreview();\n                });\n            }\n        });\n    }\n\n    updateCampaignPreview() {\n        const messageTemplate = document.getElementById('messageTemplate')?.value || '';\n        const targetLanguage = document.getElementById('targetLanguage')?.value || 'all';\n        const targetScholarship = document.getElementById('targetScholarship')?.value || 'all';\n\n        // Calculate targeted students\n        const targetedStudents = this.students.filter(student => {\n            const langMatch = targetLanguage === 'all' || student.lang === targetLanguage;\n            const scholarshipMatch = targetScholarship === 'all' || student.scholarshipType === targetScholarship;\n            return langMatch && scholarshipMatch;\n        });\n\n        // Update targeted count\n        const targetedCount = document.getElementById('targetedCount');\n        if (targetedCount) {\n            targetedCount.textContent = targetedStudents.length;\n        }\n\n        // Update message preview\n        const messagePreview = document.getElementById('messagePreview');\n        if (messagePreview && targetedStudents.length > 0) {\n            const sampleStudent = targetedStudents[0];\n            const previewMessage = this.formatMessageTemplate(messageTemplate, sampleStudent);\n            messagePreview.textContent = previewMessage;\n        }\n    }\n\n    formatMessageTemplate(template, student) {\n        return template\n            .replace(/\\{\\{name\\}\\}/g, student.name)\n            .replace(/\\{\\{amount\\}\\}/g, '₹5,000')\n            .replace(/\\{\\{status\\}\\}/g, student.status)\n            .replace(/\\{\\{studentId\\}\\}/g, student.studentId);\n    }\n\n    previewCampaign() {\n        this.updateCampaignPreview();\n        this.showNotification('Campaign preview updated', 'info');\n    }\n\n    sendCampaign() {\n        const campaignName = document.getElementById('campaignName')?.value;\n        const messageTemplate = document.getElementById('messageTemplate')?.value;\n        const targetLanguage = document.getElementById('targetLanguage')?.value;\n        const targetScholarship = document.getElementById('targetScholarship')?.value;\n        const scheduleTime = document.getElementById('scheduleTime')?.value;\n\n        if (!campaignName || !messageTemplate) {\n            this.showNotification('Please fill in campaign name and message template', 'error');\n            return;\n        }\n\n        // Create campaign object\n        const campaign = {\n            id: Date.now(),\n            name: campaignName,\n            message: messageTemplate,\n            targetLanguage: targetLanguage,\n            targetScholarship: targetScholarship,\n            scheduleTime: scheduleTime,\n            status: scheduleTime ? 'scheduled' : 'sent',\n            sentAt: scheduleTime ? null : new Date().toISOString(),\n            targetedCount: this.students.filter(student => {\n                const langMatch = targetLanguage === 'all' || student.lang === targetLanguage;\n                const scholarshipMatch = targetScholarship === 'all' || student.scholarshipType === targetScholarship;\n                return langMatch && scholarshipMatch;\n            }).length\n        };\n\n        this.campaigns.push(campaign);\n        this.dashboardData.messagesSent += campaign.targetedCount;\n        this.dashboardData.activeCampaigns = this.campaigns.filter(c => c.status === 'scheduled').length;\n\n        // Save to localStorage\n        localStorage.setItem('adminCampaigns', JSON.stringify(this.campaigns));\n\n        // Clear form\n        document.getElementById('campaignName').value = '';\n        document.getElementById('messageTemplate').value = '';\n        document.getElementById('scheduleTime').value = '';\n\n        const message = scheduleTime ? 'Campaign scheduled successfully' : 'Campaign sent successfully';\n        this.showNotification(message, 'success');\n\n        this.renderCampaignHistory();\n        this.updateDashboard();\n    }\n\n    renderCampaignHistory() {\n        const historyList = document.getElementById('campaignHistoryList');\n        if (!historyList) return;\n\n        const historyStatus = document.getElementById('historyStatus')?.value || 'all';\n        \n        let filteredCampaigns = this.campaigns;\n        if (historyStatus !== 'all') {\n            filteredCampaigns = this.campaigns.filter(campaign => campaign.status === historyStatus);\n        }\n\n        if (filteredCampaigns.length === 0) {\n            historyList.innerHTML = `\n                <div class=\"no-campaigns\">\n                    <p>No campaigns found</p>\n                </div>\n            `;\n            return;\n        }\n\n        historyList.innerHTML = filteredCampaigns.map(campaign => `\n            <div class=\"campaign-item\">\n                <div class=\"campaign-header\">\n                    <div class=\"campaign-name\">${campaign.name}</div>\n                    <div class=\"campaign-status ${campaign.status}\">${this.capitalizeFirst(campaign.status)}</div>\n                </div>\n                <div class=\"campaign-meta\">\n                    <span>Targeted: ${campaign.targetedCount} students</span> |\n                    <span>Language: ${campaign.targetLanguage === 'all' ? 'All' : campaign.targetLanguage.toUpperCase()}</span> |\n                    <span>Scholarship: ${campaign.targetScholarship === 'all' ? 'All' : campaign.targetScholarship}</span>\n                    ${campaign.sentAt ? `| <span>Sent: ${new Date(campaign.sentAt).toLocaleString()}</span>` : ''}\n                </div>\n                <div class=\"campaign-message\">\n                    \"${campaign.message.substring(0, 100)}${campaign.message.length > 100 ? '...' : ''}\"\n                </div>\n            </div>\n        `).join('');\n    }\n\n    setupDashboardHandlers() {\n        const downloadReportBtn = document.getElementById('downloadReport');\n        const refreshDashboardBtn = document.getElementById('refreshDashboard');\n\n        if (downloadReportBtn) {\n            downloadReportBtn.addEventListener('click', () => {\n                this.downloadReport();\n            });\n        }\n\n        if (refreshDashboardBtn) {\n            refreshDashboardBtn.addEventListener('click', () => {\n                this.updateDashboard();\n                this.renderDashboard();\n                this.showNotification('Dashboard refreshed', 'success');\n            });\n        }\n    }\n\n    renderDashboard() {\n        this.updateKPIs();\n        this.renderCharts();\n    }\n\n    updateKPIs() {\n        document.getElementById('totalStudents').textContent = this.students.length;\n        document.getElementById('messagesSent').textContent = this.dashboardData.messagesSent;\n        document.getElementById('deliveryRate').textContent = `${this.dashboardData.deliveryRate}%`;\n        document.getElementById('activeCampaigns').textContent = this.dashboardData.activeCampaigns;\n    }\n\n    renderCharts() {\n        this.renderMessagesChart();\n        this.renderScholarshipChart();\n    }\n\n    renderMessagesChart() {\n        const canvas = document.getElementById('messagesChart');\n        if (!canvas || !window.Chart) return;\n\n        const ctx = canvas.getContext('2d');\n        \n        // Generate mock data for the last 7 days\n        const labels = [];\n        const data = [];\n        for (let i = 6; i >= 0; i--) {\n            const date = new Date();\n            date.setDate(date.getDate() - i);\n            labels.push(date.toLocaleDateString('en-IN', { month: 'short', day: 'numeric' }));\n            data.push(Math.floor(Math.random() * 500) + 100);\n        }\n\n        new Chart(ctx, {\n            type: 'line',\n            data: {\n                labels: labels,\n                datasets: [{\n                    label: 'Messages Sent',\n                    data: data,\n                    borderColor: '#FF9933',\n                    backgroundColor: 'rgba(255, 153, 51, 0.1)',\n                    tension: 0.4\n                }]\n            },\n            options: {\n                responsive: true,\n                maintainAspectRatio: false,\n                plugins: {\n                    legend: {\n                        position: 'bottom'\n                    }\n                },\n                scales: {\n                    y: {\n                        beginAtZero: true\n                    }\n                }\n            }\n        });\n    }\n\n    renderScholarshipChart() {\n        const canvas = document.getElementById('scholarshipChart');\n        if (!canvas || !window.Chart) return;\n\n        const ctx = canvas.getContext('2d');\n        \n        // Count scholarship types\n        const scholarshipCounts = {\n            'PreMatric': 0,\n            'PostMatric': 0\n        };\n\n        this.students.forEach(student => {\n            if (scholarshipCounts.hasOwnProperty(student.scholarshipType)) {\n                scholarshipCounts[student.scholarshipType]++;\n            }\n        });\n\n        new Chart(ctx, {\n            type: 'doughnut',\n            data: {\n                labels: ['Pre-Matric', 'Post-Matric'],\n                datasets: [{\n                    data: [scholarshipCounts.PreMatric, scholarshipCounts.PostMatric],\n                    backgroundColor: ['#FF9933', '#138808'],\n                    borderColor: ['#FF9933', '#138808'],\n                    borderWidth: 1\n                }]\n            },\n            options: {\n                responsive: true,\n                maintainAspectRatio: false,\n                plugins: {\n                    legend: {\n                        position: 'bottom'\n                    }\n                }\n            }\n        });\n    }\n\n    downloadReport() {\n        const reportData = {\n            generatedAt: new Date().toISOString(),\n            totalStudents: this.students.length,\n            totalCampaigns: this.campaigns.length,\n            messagesSent: this.dashboardData.messagesSent,\n            students: this.students,\n            campaigns: this.campaigns\n        };\n\n        const blob = new Blob([JSON.stringify(reportData, null, 2)], { type: 'application/json' });\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = `admin-report-${new Date().toISOString().split('T')[0]}.json`;\n        document.body.appendChild(a);\n        a.click();\n        document.body.removeChild(a);\n        URL.revokeObjectURL(url);\n\n        this.showNotification('Report downloaded successfully', 'success');\n    }\n\n    updateDashboard() {\n        this.dashboardData.totalStudents = this.students.length;\n        this.dashboardData.activeCampaigns = this.campaigns.filter(c => c.status === 'scheduled').length;\n        this.dashboardData.deliveryRate = Math.floor(Math.random() * 20) + 80; // Mock delivery rate\n    }\n\n    loadMockData() {\n        // Load from localStorage if available\n        const savedStudents = localStorage.getItem('adminStudents');\n        const savedCampaigns = localStorage.getItem('adminCampaigns');\n\n        if (savedStudents) {\n            this.students = JSON.parse(savedStudents);\n        } else {\n            // Generate some mock students\n            this.students = [\n                {\n                    id: 1,\n                    studentId: 'SC001',\n                    name: 'Rahul Kumar',\n                    phone: '+91-9876543210',\n                    lang: 'hi',\n                    aadhaar: '1234-5678-9012',\n                    bankAccount: '123456789012',\n                    ifsc: 'SBIN0001234',\n                    scholarshipType: 'PostMatric',\n                    email: 'rahul@example.com',\n                    status: 'completed',\n                    uploadDate: new Date().toISOString()\n                },\n                {\n                    id: 2,\n                    studentId: 'SC002',\n                    name: 'Priya Sharma',\n                    phone: '+91-9876543211',\n                    lang: 'en',\n                    aadhaar: '1234-5678-9013',\n                    bankAccount: '123456789013',\n                    ifsc: 'HDFC0001234',\n                    scholarshipType: 'PreMatric',\n                    email: 'priya@example.com',\n                    status: 'pending',\n                    uploadDate: new Date().toISOString()\n                }\n            ];\n        }\n\n        if (savedCampaigns) {\n            this.campaigns = JSON.parse(savedCampaigns);\n        }\n\n        this.dashboardData.messagesSent = this.campaigns.reduce((total, campaign) => {\n            return total + (campaign.status === 'sent' ? campaign.targetedCount : 0);\n        }, 0);\n    }\n\n    // Utility methods\n    editStudent(studentId) {\n        const student = this.students.find(s => s.id == studentId);\n        if (student) {\n            // In a real app, this would open an edit modal\n            const newName = prompt('Enter new name:', student.name);\n            if (newName) {\n                student.name = newName;\n                this.renderStudentsTable();\n                localStorage.setItem('adminStudents', JSON.stringify(this.students));\n                this.showNotification('Student updated successfully', 'success');\n            }\n        }\n    }\n\n    sendSingleSms(studentId) {\n        const student = this.students.find(s => s.id == studentId);\n        if (student) {\n            const message = prompt('Enter SMS message:', `Dear ${student.name}, your scholarship status has been updated.`);\n            if (message) {\n                // Simulate SMS sending\n                this.dashboardData.messagesSent++;\n                this.showNotification(`SMS sent to ${student.name}`, 'success');\n                this.updateKPIs();\n            }\n        }\n    }\n\n    capitalizeFirst(str) {\n        return str.charAt(0).toUpperCase() + str.slice(1);\n    }\n\n    showNotification(message, type = 'info') {\n        const notification = document.createElement('div');\n        notification.className = `notification ${type}`;\n        notification.textContent = message;\n        \n        const colors = {\n            success: '#138808',\n            error: '#dc3545',\n            info: '#FF9933',\n            warning: '#ffc107'\n        };\n\n        notification.style.cssText = `\n            position: fixed;\n            top: 20px;\n            right: 20px;\n            background: ${colors[type] || colors.info};\n            color: white;\n            padding: 1rem;\n            border-radius: 4px;\n            z-index: 1000;\n            animation: slideIn 0.3s ease-out;\n            max-width: 300px;\n            word-wrap: break-word;\n        `;\n        \n        document.body.appendChild(notification);\n        \n        setTimeout(() => {\n            notification.style.animation = 'slideOut 0.3s ease-out';\n            setTimeout(() => {\n                if (notification.parentNode) {\n                    notification.parentNode.removeChild(notification);\n                }\n            }, 300);\n        }, 3000);\n    }\n}\n\n// Global instance for easy access from HTML onclick handlers\nlet adminManager;\n\n// Initialize admin manager when DOM is loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n    adminManager = new AdminManager();\n});","size_bytes":25918},"js/chatbot.js":{"content":"// Rule-based multilingual chatbot for the government website\nclass ChatBot {\n    constructor() {\n        this.isOpen = false;\n        this.botData = {\n            en: {\n                greeting: \"Hello! I'm your DBT Guide assistant. How can I help you today?\",\n                fallback: \"I didn't understand that. You can ask me about DBT, Aadhaar seeding, scholarships, or eligibility criteria.\",\n                responses: {\n                    // Greetings\n                    \"hello\": \"Hello! How can I assist you with DBT or scholarship information?\",\n                    \"hi\": \"Hi there! I'm here to help with your scholarship and DBT queries.\",\n                    \"namaste\": \"Namaste! How can I help you today?\",\n                    \n                    // DBT related\n                    \"what is dbt\": \"DBT stands for Direct Benefit Transfer. It's a government initiative to transfer subsidies and benefits directly to beneficiary accounts.\",\n                    \"dbt meaning\": \"Direct Benefit Transfer (DBT) ensures that government benefits reach you directly without any intermediaries.\",\n                    \"dbt benefits\": \"DBT benefits include faster processing, transparency, reduced corruption, and direct money transfer to your bank account.\",\n                    \n                    // Aadhaar seeding\n                    \"aadhaar seeding\": \"Aadhaar seeding is linking your Aadhaar number with your bank account to enable DBT. Visit your bank or use online banking to complete this.\",\n                    \"how to seed aadhaar\": \"To seed Aadhaar: 1) Visit your bank branch 2) Fill the seeding form 3) Provide Aadhaar and account details 4) Bank will link them for DBT.\",\n                    \"seeding status\": \"You can check your seeding status on your bank's website, NPCI mapper, or by visiting your branch.\",\n                    \"seed bank account\": \"Visit your bank with Aadhaar card and bank account details. Fill the Aadhaar seeding form and submit it to the bank official.\",\n                    \n                    // Scholarships\n                    \"scholarship eligibility\": \"SC students can apply for Pre-Matric (Class 9-10) and Post-Matric (Class 11+ and higher education) scholarships based on income criteria.\",\n                    \"how to apply\": \"Apply online through the National Scholarship Portal (NSP) at scholarships.gov.in with required documents.\",\n                    \"scholarship documents\": \"Required documents: Income certificate, Caste certificate, Bank account details, Aadhaar card, Educational certificates, and Fee receipt.\",\n                    \"scholarship amount\": \"Scholarship amount varies by education level and course type. Check the official guidelines on NSP for exact amounts.\",\n                    \"when scholarship\": \"Scholarships are typically disbursed in the academic year after verification and approval of applications.\",\n                    \n                    // Banking\n                    \"bank account\": \"You need a savings bank account with Aadhaar seeding completed. Account should be in your name and active for receiving DBT.\",\n                    \"which bank\": \"You can use any nationalized, private, or cooperative bank account that supports DBT. Most major banks are DBT enabled.\",\n                    \"account problem\": \"If you're facing account issues, contact your bank branch immediately or call their customer service helpline.\",\n                    \n                    // Technical help\n                    \"portal not working\": \"If the portal is not working, try clearing browser cache, using different browser, or contact helpdesk at 1800-11-1111.\",\n                    \"login problem\": \"For login issues, check your credentials, reset password if needed, or contact the portal helpdesk for assistance.\",\n                    \"otp not received\": \"If OTP is not received, check network connectivity, wait for 2-3 minutes, or use 'Resend OTP' option.\",\n                    \n                    // Status queries\n                    \"application status\": \"You can check your application status by logging into NSP portal with your application ID and registered mobile number.\",\n                    \"payment status\": \"Payment status can be tracked through NSP portal or by checking your linked bank account for DBT credits.\",\n                    \"when will i get\": \"Processing time varies but typically takes 2-3 months after application submission and verification completion.\",\n                    \n                    // Help and guidance\n                    \"help\": \"I can help you with DBT information, Aadhaar seeding, scholarship applications, eligibility criteria, and technical issues.\",\n                    \"contact\": \"For direct assistance: National Helpdesk 1800-11-1111 | Email: scholarships@gov.in | Visit nearest CSC center\",\n                    \"documents needed\": \"Basic documents: Aadhaar card, Bank account details, Caste certificate, Income certificate, Educational certificates, Fee receipts.\",\n                    \n                    // Common issues\n                    \"rejected application\": \"If application is rejected, check the reason in NSP portal and reapply with correct documents during the next cycle.\",\n                    \"incomplete verification\": \"Complete verification by uploading all required documents clearly. Check document specifications on NSP portal.\",\n                    \"wrong bank details\": \"If bank details are wrong, log into NSP portal and update them in your profile section before the deadline.\"\n                }\n            },\n            hi: {\n                greeting: \"नमस्ते! मैं आपका DBT गाइड असिस्टेंट हूं। आज मैं आपकी कैसे मदद कर सकता हूं?\",\n                fallback: \"मुझे यह समझ नहीं आया। आप मुझसे DBT, आधार सीडिंग, छात्रवृत्ति या पात्रता मापदंड के बारे में पूछ सकते हैं।\",\n                responses: {\n                    // Greetings\n                    \"नमस्ते\": \"नमस्ते! DBT और छात्रवृत्ति की जानकारी के लिए मैं आपकी कैसे मदद कर सकता हूं?\",\n                    \"हैलो\": \"हैलो! आपके छात्रवृत्ति और DBT प्रश्नों में मदद के लिए मैं यहां हूं।\",\n                    \"हाय\": \"हाय! मैं आपकी सहायता कैसे कर सकता हूं?\",\n                    \n                    // DBT related\n                    \"dbt क्या है\": \"DBT का मतलब है प्रत्यक्ष लाभ अंतरण। यह सरकार की पहल है जो सब्सिडी सीधे लाभार्थी के खाते में ट्रांसफर करती है।\",\n                    \"डीबीटी का मतलब\": \"प्रत्यक्ष लाभ अंतरण (DBT) यह सुनिश्चित करता है कि सरकारी लाभ बिना किसी बिचौलिये के सीधे आप तक पहुंचे।\",\n                    \"dbt के फायदे\": \"DBT के फायदे: तेज प्रसंस्करण, पारदर्शिता, भ्रष्टाचार में कमी और सीधे बैंक खाते में पैसा।\",\n                    \n                    // Aadhaar seeding\n                    \"आधार सीडिंग\": \"आधार सीडिंग का मतलब है आपके आधार को बैंक खाते से जोड़ना। अपने बैंक जाएं या ऑनलाइन बैंकिंग का उपयोग करें।\",\n                    \"आधार कैसे सीड करें\": \"आधार सीड करने के लिए: 1) बैंक ब्रांच जाएं 2) सीडिंग फॉर्म भरें 3) आधार और खाता विवरण दें 4) बैंक DBT के लिए लिंक कर देगा।\",\n                    \"सीडिंग स्टेटस\": \"अपनी सीडिंग स्थिति बैंक की वेबसाइट, NPCI मैपर पर या ब्रांच जाकर जांच सकते हैं।\",\n                    \"बैंक खाता सीड\": \"आधार कार्ड और बैंक खाता विवरण लेकर बैंक जाएं। आधार सीडिंग फॉर्म भरकर बैंक अधिकारी को दें।\",\n                    \n                    // Scholarships\n                    \"छात्रवृत्ति पात्रता\": \"SC छात्र आय के आधार पर प्री-मैट्रिक (कक्षा 9-10) और पोस्ट-मैट्रिक (कक्षा 11+ और उच्च शिक्षा) छात्रवृत्ति के लिए आवेदन कर सकते हैं।\",\n                    \"आवेदन कैसे करें\": \"scholarships.gov.in पर राष्ट्रीय छात्रवृत्ति पोर्टल (NSP) के माध्यम से आवश्यक दस्तावेजों के साथ ऑनलाइन आवेदन करें।\",\n                    \"छात्रवृत्ति दस्तावेज\": \"आवश्यक दस्तावेज: आय प्रमाण पत्र, जाति प्रमाण पत्र, बैंक खाता विवरण, आधार कार्ड, शैक्षणिक प्रमाण पत्र, और फीस रसीद।\",\n                    \"छात्रवृत्ति राशि\": \"छात्रवृत्ति राशि शिक्षा स्तर और कोर्स के प्रकार के अनुसार अलग होती है। सही राशि के लिए NSP पर आधिकारिक दिशानिर्देश देखें।\",\n                    \"छात्रवृत्ति कब मिलेगी\": \"छात्रवृत्ति आमतौर पर आवेदन सत्यापन और अनुमोदन के बाद शैक्षणिक वर्ष में वितरित की जाती है।\",\n                    \n                    // Banking\n                    \"बैंक खाता\": \"आपको आधार सीडिंग के साथ बचत बैंक खाता चाहिए। खाता आपके नाम पर होना चाहिए और DBT प्राप्त करने के लिए सक्रिय होना चाहिए।\",\n                    \"कौन सा बैंक\": \"आप किसी भी राष्ट्रीयकृत, निजी या सहकारी बैंक खाते का उपयोग कर सकते हैं जो DBT का समर्थन करता हो।\",\n                    \"खाता समस्या\": \"अगर खाते में समस्या हो तो तुरंत अपनी बैंक ब्रांच से संपर्क करें या उनकी कस्टमर सर्विस हेल्पलाइन पर कॉल करें।\",\n                    \n                    // Technical help\n                    \"पोर्टल काम नहीं कर रहा\": \"अगर पोर्टल काम नहीं कर रहा है तो ब्राउज़र कैश साफ़ करें, दूसरा ब्राउज़र इस्तेमाल करें या 1800-11-1111 पर हेल्पडेस्क से संपर्क करें।\",\n                    \"लॉगिन प्रॉब्लम\": \"लॉगिन समस्या के लिए अपनी जानकारी चेक करें, जरूरत हो तो पासवर्ड रीसेट करें या पोर्टल हेल्पडेस्क से सहायता लें।\",\n                    \"otp नहीं आ रहा\": \"अगर OTP नहीं आ रहा है तो नेटवर्क कनेक्टिविटी चेक करें, 2-3 मिनट इंतजार करें या 'OTP दोबारा भेजें' का उपयोग करें।\",\n                    \n                    // Help\n                    \"मदद\": \"मैं DBT जानकारी, आधार सीडिंग, छात्रवृत्ति आवेदन, पात्रता मापदंड और तकनीकी समस्याओं में आपकी मदद कर सकता हूं।\",\n                    \"संपर्क\": \"सीधी सहायता के लिए: राष्ट्रीय हेल्पडेस्क 1800-11-1111 | ईमेल: scholarships@gov.in | निकटतम CSC केंद्र जाएं\"\n                }\n            }\n        };\n        \n        this.init();\n    }\n\n    init() {\n        this.setupChatWidget();\n        this.setupEventListeners();\n    }\n\n    setupChatWidget() {\n        const chatWidget = document.getElementById('chatWidget');\n        if (!chatWidget) return;\n\n        // Initialize chat with greeting\n        setTimeout(() => {\n            this.addBotMessage(this.getCurrentLanguageData().greeting);\n        }, 1000);\n    }\n\n    setupEventListeners() {\n        const chatToggle = document.getElementById('chatToggle');\n        const chatClose = document.getElementById('chatClose');\n        const chatSend = document.getElementById('chatSend');\n        const chatInput = document.getElementById('chatInput');\n\n        if (chatToggle) {\n            chatToggle.addEventListener('click', () => {\n                this.toggleChat();\n            });\n        }\n\n        if (chatClose) {\n            chatClose.addEventListener('click', () => {\n                this.closeChat();\n            });\n        }\n\n        if (chatSend) {\n            chatSend.addEventListener('click', () => {\n                this.sendMessage();\n            });\n        }\n\n        if (chatInput) {\n            chatInput.addEventListener('keypress', (e) => {\n                if (e.key === 'Enter') {\n                    this.sendMessage();\n                }\n            });\n\n            // Show typing indicator\n            let typingTimer;\n            chatInput.addEventListener('input', () => {\n                clearTimeout(typingTimer);\n                typingTimer = setTimeout(() => {\n                    // Could show \"Bot is thinking...\" here\n                }, 1000);\n            });\n        }\n    }\n\n    toggleChat() {\n        const chatWindow = document.getElementById('chatWindow');\n        if (chatWindow) {\n            if (this.isOpen) {\n                this.closeChat();\n            } else {\n                this.openChat();\n            }\n        }\n    }\n\n    openChat() {\n        const chatWindow = document.getElementById('chatWindow');\n        if (chatWindow) {\n            chatWindow.classList.add('active');\n            this.isOpen = true;\n            \n            // Focus on input\n            const input = document.getElementById('chatInput');\n            if (input) {\n                setTimeout(() => input.focus(), 100);\n            }\n        }\n    }\n\n    closeChat() {\n        const chatWindow = document.getElementById('chatWindow');\n        if (chatWindow) {\n            chatWindow.classList.remove('active');\n            this.isOpen = false;\n        }\n    }\n\n    sendMessage() {\n        const input = document.getElementById('chatInput');\n        if (!input || !input.value.trim()) return;\n\n        const message = input.value.trim();\n        input.value = '';\n\n        // Add user message\n        this.addUserMessage(message);\n\n        // Process and respond\n        setTimeout(() => {\n            const response = this.processMessage(message);\n            this.addBotMessage(response);\n        }, 500);\n    }\n\n    addUserMessage(message) {\n        const chatMessages = document.getElementById('chatMessages');\n        if (!chatMessages) return;\n\n        const messageDiv = document.createElement('div');\n        messageDiv.className = 'chat-message user';\n        messageDiv.innerHTML = `\n            <div class=\"message-bubble user\">${this.escapeHtml(message)}</div>\n        `;\n\n        chatMessages.appendChild(messageDiv);\n        this.scrollToBottom();\n    }\n\n    addBotMessage(message) {\n        const chatMessages = document.getElementById('chatMessages');\n        if (!chatMessages) return;\n\n        const messageDiv = document.createElement('div');\n        messageDiv.className = 'chat-message bot';\n        messageDiv.innerHTML = `\n            <div class=\"message-bubble bot\">${message}</div>\n        `;\n\n        chatMessages.appendChild(messageDiv);\n        this.scrollToBottom();\n    }\n\n    scrollToBottom() {\n        const chatMessages = document.getElementById('chatMessages');\n        if (chatMessages) {\n            chatMessages.scrollTop = chatMessages.scrollHeight;\n        }\n    }\n\n    processMessage(message) {\n        const langData = this.getCurrentLanguageData();\n        const normalizedMessage = this.normalizeMessage(message);\n        \n        // Check for exact matches first\n        if (langData.responses[normalizedMessage]) {\n            return langData.responses[normalizedMessage];\n        }\n\n        // Fuzzy matching for partial matches\n        const bestMatch = this.findBestMatch(normalizedMessage, langData.responses);\n        if (bestMatch) {\n            return langData.responses[bestMatch];\n        }\n\n        // Return fallback response with helpful suggestions\n        return langData.fallback + \"<br><br>Popular topics:<br>\" +\n               \"• DBT information<br>\" +\n               \"• Aadhaar seeding<br>\" +\n               \"• Scholarship eligibility<br>\" +\n               \"• Application process<br>\" +\n               \"• Contact information\";\n    }\n\n    normalizeMessage(message) {\n        return message.toLowerCase()\n                     .replace(/[^\\w\\s]/g, ' ')\n                     .replace(/\\s+/g, ' ')\n                     .trim();\n    }\n\n    findBestMatch(input, responses) {\n        const inputWords = input.split(' ');\n        let bestMatch = '';\n        let maxScore = 0;\n\n        for (const key in responses) {\n            const keyWords = key.split(' ');\n            let score = 0;\n\n            // Calculate similarity score\n            inputWords.forEach(inputWord => {\n                keyWords.forEach(keyWord => {\n                    if (inputWord.includes(keyWord) || keyWord.includes(inputWord)) {\n                        score++;\n                    }\n                });\n            });\n\n            // Normalize score\n            const normalizedScore = score / Math.max(inputWords.length, keyWords.length);\n            \n            if (normalizedScore > 0.3 && normalizedScore > maxScore) {\n                maxScore = normalizedScore;\n                bestMatch = key;\n            }\n        }\n\n        return maxScore > 0.3 ? bestMatch : null;\n    }\n\n    getCurrentLanguageData() {\n        const currentLang = window.i18nManager ? window.i18nManager.getCurrentLanguage() : 'en';\n        return this.botData[currentLang] || this.botData['en'];\n    }\n\n    escapeHtml(text) {\n        const div = document.createElement('div');\n        div.textContent = text;\n        return div.innerHTML;\n    }\n\n    // Method to add custom responses or update bot data\n    updateBotData(language, responses) {\n        if (this.botData[language]) {\n            this.botData[language].responses = {\n                ...this.botData[language].responses,\n                ...responses\n            };\n        }\n    }\n\n    // Method to get chat history (could be useful for analytics)\n    getChatHistory() {\n        const messages = document.querySelectorAll('.chat-message');\n        const history = [];\n        \n        messages.forEach(message => {\n            const bubble = message.querySelector('.message-bubble');\n            if (bubble) {\n                history.push({\n                    type: message.classList.contains('user') ? 'user' : 'bot',\n                    message: bubble.textContent,\n                    timestamp: new Date()\n                });\n            }\n        });\n        \n        return history;\n    }\n\n    // Method to clear chat history\n    clearChat() {\n        const chatMessages = document.getElementById('chatMessages');\n        if (chatMessages) {\n            chatMessages.innerHTML = '';\n            // Re-add greeting\n            setTimeout(() => {\n                this.addBotMessage(this.getCurrentLanguageData().greeting);\n            }, 300);\n        }\n    }\n}\n\n// Initialize chatbot when DOM is ready\ndocument.addEventListener('DOMContentLoaded', () => {\n    new ChatBot();\n});","size_bytes":21632},"js/community.js":{"content":"// Community resources management\nclass CommunityManager {\n    constructor() {\n        this.resources = [];\n        this.filteredResources = [];\n        this.currentPage = 1;\n        this.itemsPerPage = 12;\n        this.currentFilter = 'all';\n        this.searchTerm = '';\n        this.init();\n    }\n\n    init() {\n        this.loadResources();\n        this.setupEventListeners();\n        this.renderResources();\n    }\n\n    setupEventListeners() {\n        // Search functionality\n        const searchInput = document.getElementById('resourceSearch');\n        if (searchInput) {\n            searchInput.addEventListener('input', (e) => {\n                this.searchTerm = e.target.value.toLowerCase();\n                this.filterResources();\n            });\n        }\n\n        // Filter chips\n        const filterChips = document.querySelectorAll('.filter-chip');\n        filterChips.forEach(chip => {\n            chip.addEventListener('click', (e) => {\n                // Update active chip\n                filterChips.forEach(c => c.classList.remove('active'));\n                e.target.classList.add('active');\n                \n                this.currentFilter = e.target.getAttribute('data-filter');\n                this.filterResources();\n            });\n        });\n\n        // Modal handlers\n        this.setupModalHandlers();\n    }\n\n    loadResources() {\n        // Mock resource data - in real app would fetch from server\n        this.resources = [\n            {\n                id: 1,\n                title: { en: 'Scholarship Application Form', hi: 'छात्रवृत्ति आवेदन फॉर्म' },\n                description: { en: 'Official application form for SC scholarships', hi: 'SC छात्रवृत्ति के लिए आधिकारिक आवेदन फॉर्म' },\n                type: 'forms',\n                language: 'both',\n                format: 'PDF',\n                size: '2.5 MB',\n                downloadUrl: '#',\n                previewUrl: '#',\n                tags: ['application', 'scholarship', 'form']\n            },\n            {\n                id: 2,\n                title: { en: 'DBT Seeding Process Infographic', hi: 'DBT सीडिंग प्रक्रिया इन्फोग्राफिक' },\n                description: { en: 'Visual guide for Aadhaar seeding process', hi: 'आधार सीडिंग प्रक्रिया के लिए विज़ुअल गाइड' },\n                type: 'infographics',\n                language: 'both',\n                format: 'PNG',\n                size: '1.8 MB',\n                downloadUrl: '#',\n                previewUrl: '#',\n                tags: ['seeding', 'aadhaar', 'process']\n            },\n            {\n                id: 3,\n                title: { en: 'Income Certificate Template', hi: 'आय प्रमाण पत्र टेम्प्लेट' },\n                description: { en: 'Template for income certificate documentation', hi: 'आय प्रमाण पत्र दस्तावेज़ के लिए टेम्प्लेट' },\n                type: 'templates',\n                language: 'both',\n                format: 'DOC',\n                size: '456 KB',\n                downloadUrl: '#',\n                previewUrl: '#',\n                tags: ['income', 'certificate', 'template']\n            },\n            {\n                id: 4,\n                title: { en: 'Bank Account Seeding QR Code', hi: 'बैंक खाता सीडिंग QR कोड' },\n                description: { en: 'QR code for quick access to bank seeding portal', hi: 'बैंक सीडिंग पोर्टल के लिए QR कोड' },\n                type: 'qr',\n                language: 'both',\n                format: 'PNG',\n                size: '125 KB',\n                downloadUrl: '#',\n                previewUrl: '#',\n                tags: ['qr', 'bank', 'seeding']\n            },\n            {\n                id: 5,\n                title: { en: 'Eligibility Criteria Checklist', hi: 'पात्रता मापदंड चेकलिस्ट' },\n                description: { en: 'Complete checklist for scholarship eligibility', hi: 'छात्रवृत्ति पात्रता के लिए पूरी चेकलिस्ट' },\n                type: 'forms',\n                language: 'both',\n                format: 'PDF',\n                size: '1.2 MB',\n                downloadUrl: '#',\n                previewUrl: '#',\n                tags: ['eligibility', 'checklist', 'criteria']\n            },\n            {\n                id: 6,\n                title: { en: 'SMS Alert Templates', hi: 'SMS अलर्ट टेम्प्लेट' },\n                description: { en: 'Pre-designed SMS templates for notifications', hi: 'सूचनाओं के लिए पूर्व-डिज़ाइन किए गए SMS टेम्प्लेट' },\n                type: 'templates',\n                language: 'both',\n                format: 'TXT',\n                size: '15 KB',\n                downloadUrl: '#',\n                previewUrl: '#',\n                tags: ['sms', 'alert', 'template']\n            }\n        ];\n\n        this.filteredResources = [...this.resources];\n    }\n\n    filterResources() {\n        this.filteredResources = this.resources.filter(resource => {\n            // Filter by type\n            const typeMatch = this.currentFilter === 'all' || resource.type === this.currentFilter;\n            \n            // Filter by search term\n            const lang = window.i18nManager ? window.i18nManager.getCurrentLanguage() : 'en';\n            const title = resource.title[lang] || resource.title.en;\n            const description = resource.description[lang] || resource.description.en;\n            const searchMatch = this.searchTerm === '' || \n                               title.toLowerCase().includes(this.searchTerm) ||\n                               description.toLowerCase().includes(this.searchTerm) ||\n                               resource.tags.some(tag => tag.toLowerCase().includes(this.searchTerm));\n\n            return typeMatch && searchMatch;\n        });\n\n        this.currentPage = 1;\n        this.renderResources();\n        this.renderPagination();\n    }\n\n    renderResources() {\n        const grid = document.getElementById('resourcesGrid');\n        if (!grid) return;\n\n        const startIndex = (this.currentPage - 1) * this.itemsPerPage;\n        const endIndex = startIndex + this.itemsPerPage;\n        const pageResources = this.filteredResources.slice(startIndex, endIndex);\n\n        if (pageResources.length === 0) {\n            grid.innerHTML = `\n                <div class=\"no-resources\">\n                    <div class=\"no-resources-icon\">📄</div>\n                    <p data-i18n=\"community.noResources\">No resources found matching your criteria</p>\n                </div>\n            `;\n            return;\n        }\n\n        grid.innerHTML = pageResources.map(resource => this.createResourceCard(resource)).join('');\n        \n        // Re-apply translations\n        if (window.i18nManager) {\n            window.i18nManager.applyTranslations();\n        }\n\n        // Add event listeners to new cards\n        this.attachResourceEventListeners();\n    }\n\n    createResourceCard(resource) {\n        const lang = window.i18nManager ? window.i18nManager.getCurrentLanguage() : 'en';\n        const title = resource.title[lang] || resource.title.en;\n        const description = resource.description[lang] || resource.description.en;\n\n        return `\n            <div class=\"resource-card\" data-resource-id=\"${resource.id}\">\n                <div class=\"resource-header\">\n                    <div class=\"resource-type\">${this.getTypeIcon(resource.type)} ${this.getTypeLabel(resource.type, lang)}</div>\n                    <div class=\"resource-format\">${resource.format}</div>\n                </div>\n                <div class=\"resource-content\">\n                    <h4 class=\"resource-title\">${title}</h4>\n                    <p class=\"resource-description\">${description}</p>\n                    <div class=\"resource-meta\">\n                        <span class=\"resource-size\">${resource.size}</span>\n                        <span class=\"resource-language\">${this.getLanguageLabel(resource.language, lang)}</span>\n                    </div>\n                </div>\n                <div class=\"resource-actions\">\n                    <button class=\"btn btn-secondary btn-sm preview-btn\" data-resource-id=\"${resource.id}\" data-i18n=\"messages.preview\">Preview</button>\n                    <button class=\"btn btn-primary btn-sm download-btn\" data-resource-id=\"${resource.id}\" data-i18n=\"messages.download\">Download</button>\n                </div>\n            </div>\n        `;\n    }\n\n    getTypeIcon(type) {\n        const icons = {\n            forms: '📋',\n            templates: '📝',\n            infographics: '📊',\n            qr: '📱'\n        };\n        return icons[type] || '📄';\n    }\n\n    getTypeLabel(type, lang) {\n        const labels = {\n            forms: { en: 'Form', hi: 'फॉर्म' },\n            templates: { en: 'Template', hi: 'टेम्प्लेट' },\n            infographics: { en: 'Infographic', hi: 'इन्फोग्राफिक' },\n            qr: { en: 'QR Code', hi: 'QR कोड' }\n        };\n        return labels[type] ? (labels[type][lang] || labels[type].en) : type;\n    }\n\n    getLanguageLabel(language, lang) {\n        const labels = {\n            both: { en: 'English/Hindi', hi: 'अंग्रेजी/हिंदी' },\n            en: { en: 'English', hi: 'अंग्रेजी' },\n            hi: { en: 'Hindi', hi: 'हिंदी' }\n        };\n        return labels[language] ? (labels[language][lang] || labels[language].en) : language;\n    }\n\n    attachResourceEventListeners() {\n        // Preview buttons\n        const previewBtns = document.querySelectorAll('.preview-btn');\n        previewBtns.forEach(btn => {\n            btn.addEventListener('click', (e) => {\n                const resourceId = parseInt(e.target.getAttribute('data-resource-id'));\n                this.previewResource(resourceId);\n            });\n        });\n\n        // Download buttons\n        const downloadBtns = document.querySelectorAll('.download-btn');\n        downloadBtns.forEach(btn => {\n            btn.addEventListener('click', (e) => {\n                const resourceId = parseInt(e.target.getAttribute('data-resource-id'));\n                this.downloadResource(resourceId);\n            });\n        });\n    }\n\n    previewResource(resourceId) {\n        const resource = this.resources.find(r => r.id === resourceId);\n        if (!resource) return;\n\n        const lang = window.i18nManager ? window.i18nManager.getCurrentLanguage() : 'en';\n        const title = resource.title[lang] || resource.title.en;\n        \n        // Show preview modal\n        const modal = document.getElementById('previewModal');\n        const previewTitle = document.getElementById('previewTitle');\n        const previewContent = document.getElementById('previewContent');\n        \n        if (modal && previewTitle && previewContent) {\n            previewTitle.textContent = title;\n            \n            // Generate mock preview content based on resource type\n            previewContent.innerHTML = this.generatePreviewContent(resource, lang);\n            \n            modal.classList.add('active');\n        }\n    }\n\n    generatePreviewContent(resource, lang) {\n        switch (resource.type) {\n            case 'forms':\n                return `\n                    <div class=\"form-preview\">\n                        <h3>${resource.title[lang]}</h3>\n                        <div class=\"form-field\">\n                            <label>Student Name / छात्र का नाम:</label>\n                            <input type=\"text\" placeholder=\"Enter your name / अपना नाम दर्ज करें\" disabled>\n                        </div>\n                        <div class=\"form-field\">\n                            <label>Aadhaar Number / आधार संख्या:</label>\n                            <input type=\"text\" placeholder=\"XXXX-XXXX-XXXX\" disabled>\n                        </div>\n                        <div class=\"form-field\">\n                            <label>Bank Account Number / बैंक खाता संख्या:</label>\n                            <input type=\"text\" placeholder=\"Enter account number / खाता संख्या दर्ज करें\" disabled>\n                        </div>\n                        <p class=\"preview-note\">${lang === 'hi' ? 'यह केवल पूर्वावलोकन है' : 'This is a preview only'}</p>\n                    </div>\n                `;\n            case 'infographics':\n                return `\n                    <div class=\"infographic-preview\">\n                        <div class=\"step-visual\">\n                            <h4>Step 1: Visit Bank</h4>\n                            <div class=\"step-icon\">🏦</div>\n                        </div>\n                        <div class=\"step-visual\">\n                            <h4>Step 2: Fill Form</h4>\n                            <div class=\"step-icon\">📝</div>\n                        </div>\n                        <div class=\"step-visual\">\n                            <h4>Step 3: Submit Documents</h4>\n                            <div class=\"step-icon\">📄</div>\n                        </div>\n                        <p class=\"preview-note\">${lang === 'hi' ? 'पूर्ण इन्फोग्राफिक डाउनलोड करें' : 'Download complete infographic'}</p>\n                    </div>\n                `;\n            case 'qr':\n                return `\n                    <div class=\"qr-preview\">\n                        <div class=\"qr-code\">\n                            <div class=\"qr-placeholder\">\n                                <div class=\"qr-pattern\"></div>\n                                QR Code\n                            </div>\n                        </div>\n                        <p>${lang === 'hi' ? 'स्कैन करके बैंक पोर्टल पर जाएं' : 'Scan to visit bank portal'}</p>\n                    </div>\n                `;\n            default:\n                return `\n                    <div class=\"document-preview\">\n                        <div class=\"document-icon\">📄</div>\n                        <h4>${resource.title[lang]}</h4>\n                        <p>${resource.description[lang]}</p>\n                        <div class=\"document-info\">\n                            <span>Format: ${resource.format}</span>\n                            <span>Size: ${resource.size}</span>\n                        </div>\n                    </div>\n                `;\n        }\n    }\n\n    downloadResource(resourceId) {\n        const resource = this.resources.find(r => r.id === resourceId);\n        if (!resource) return;\n\n        // In a real application, this would trigger an actual download\n        const lang = window.i18nManager ? window.i18nManager.getCurrentLanguage() : 'en';\n        const message = lang === 'hi' \n            ? `डाउनलोड शुरू: ${resource.title[lang]}`\n            : `Download started: ${resource.title[lang]}`;\n        \n        // Show download notification\n        this.showNotification(message, 'success');\n        \n        // Simulate download delay\n        setTimeout(() => {\n            const completeMessage = lang === 'hi' \n                ? 'डाउनलोड पूर्ण!' \n                : 'Download complete!';\n            this.showNotification(completeMessage, 'success');\n        }, 2000);\n    }\n\n    showNotification(message, type = 'info') {\n        // Create notification element\n        const notification = document.createElement('div');\n        notification.className = `notification ${type}`;\n        notification.textContent = message;\n        \n        // Style the notification\n        notification.style.cssText = `\n            position: fixed;\n            top: 20px;\n            right: 20px;\n            background: ${type === 'success' ? 'var(--gov-green)' : 'var(--gov-orange)'};\n            color: white;\n            padding: var(--spacing-md);\n            border-radius: var(--border-radius);\n            z-index: 1000;\n            animation: slideIn 0.3s ease-out;\n        `;\n        \n        document.body.appendChild(notification);\n        \n        // Remove after 3 seconds\n        setTimeout(() => {\n            notification.style.animation = 'slideOut 0.3s ease-out';\n            setTimeout(() => {\n                if (notification.parentNode) {\n                    notification.parentNode.removeChild(notification);\n                }\n            }, 300);\n        }, 3000);\n    }\n\n    renderPagination() {\n        const pagination = document.getElementById('pagination');\n        if (!pagination) return;\n\n        const totalPages = Math.ceil(this.filteredResources.length / this.itemsPerPage);\n        \n        if (totalPages <= 1) {\n            pagination.innerHTML = '';\n            return;\n        }\n\n        let paginationHTML = '';\n        \n        // Previous button\n        if (this.currentPage > 1) {\n            paginationHTML += `<button class=\"page-btn\" data-page=\"${this.currentPage - 1}\">‹</button>`;\n        }\n        \n        // Page numbers\n        for (let i = 1; i <= totalPages; i++) {\n            if (i === this.currentPage) {\n                paginationHTML += `<button class=\"page-btn active\" data-page=\"${i}\">${i}</button>`;\n            } else if (i === 1 || i === totalPages || Math.abs(i - this.currentPage) <= 2) {\n                paginationHTML += `<button class=\"page-btn\" data-page=\"${i}\">${i}</button>`;\n            } else if (i === this.currentPage - 3 || i === this.currentPage + 3) {\n                paginationHTML += `<span class=\"page-ellipsis\">...</span>`;\n            }\n        }\n        \n        // Next button\n        if (this.currentPage < totalPages) {\n            paginationHTML += `<button class=\"page-btn\" data-page=\"${this.currentPage + 1}\">›</button>`;\n        }\n        \n        pagination.innerHTML = paginationHTML;\n        \n        // Add event listeners\n        const pageButtons = pagination.querySelectorAll('.page-btn');\n        pageButtons.forEach(btn => {\n            btn.addEventListener('click', (e) => {\n                this.currentPage = parseInt(e.target.getAttribute('data-page'));\n                this.renderResources();\n                this.renderPagination();\n            });\n        });\n    }\n\n    setupModalHandlers() {\n        const modal = document.getElementById('previewModal');\n        const closeBtn = document.getElementById('previewClose');\n        const closePreviewBtn = document.getElementById('closePreview');\n        const downloadBtn = document.getElementById('downloadBtn');\n\n        if (closeBtn) {\n            closeBtn.addEventListener('click', () => {\n                modal.classList.remove('active');\n            });\n        }\n\n        if (closePreviewBtn) {\n            closePreviewBtn.addEventListener('click', () => {\n                modal.classList.remove('active');\n            });\n        }\n\n        if (downloadBtn) {\n            downloadBtn.addEventListener('click', () => {\n                // Download current preview resource\n                modal.classList.remove('active');\n            });\n        }\n\n        // Close modal on background click\n        if (modal) {\n            modal.addEventListener('click', (e) => {\n                if (e.target === modal) {\n                    modal.classList.remove('active');\n                }\n            });\n        }\n    }\n}\n\n// Add CSS for notifications\nconst style = document.createElement('style');\nstyle.textContent = `\n    @keyframes slideIn {\n        from { transform: translateX(100%); }\n        to { transform: translateX(0); }\n    }\n    @keyframes slideOut {\n        from { transform: translateX(0); }\n        to { transform: translateX(100%); }\n    }\n    .resource-card {\n        background: var(--gov-white);\n        border: 1px solid var(--gov-medium-gray);\n        border-radius: var(--border-radius);\n        padding: var(--spacing-lg);\n        box-shadow: var(--box-shadow);\n        transition: var(--transition);\n    }\n    .resource-card:hover {\n        transform: translateY(-2px);\n        box-shadow: 0 4px 8px rgba(0,0,0,0.15);\n    }\n    .resources-grid {\n        display: grid;\n        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n        gap: var(--spacing-lg);\n    }\n    .filter-chip {\n        padding: var(--spacing-sm) var(--spacing-md);\n        border: 1px solid var(--gov-medium-gray);\n        background: var(--gov-white);\n        border-radius: 20px;\n        cursor: pointer;\n        transition: var(--transition);\n    }\n    .filter-chip.active {\n        background: var(--gov-orange);\n        color: var(--gov-white);\n        border-color: var(--gov-orange);\n    }\n    .pagination {\n        display: flex;\n        justify-content: center;\n        gap: var(--spacing-sm);\n        margin-top: var(--spacing-xl);\n    }\n    .page-btn {\n        padding: var(--spacing-sm) var(--spacing-md);\n        border: 1px solid var(--gov-medium-gray);\n        background: var(--gov-white);\n        cursor: pointer;\n        border-radius: var(--border-radius);\n    }\n    .page-btn.active {\n        background: var(--gov-orange);\n        color: var(--gov-white);\n    }\n`;\ndocument.head.appendChild(style);\n\n// Initialize community manager when DOM is loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n    new CommunityManager();\n});","size_bytes":21860},"js/i18n.js":{"content":"// Internationalization (i18n) system for the government website\nclass I18nManager {\n    constructor() {\n        this.currentLang = localStorage.getItem('lang') || 'en';\n        this.translations = {};\n        this.isLoaded = false;\n        this.init();\n    }\n\n    async init() {\n        await this.loadTranslations(this.currentLang);\n        this.updatePageLanguage();\n        this.setupLanguageSelector();\n        this.applyTranslations();\n    }\n\n    async loadTranslations(lang) {\n        try {\n            const response = await fetch(`i18n/${lang}.json`);\n            const translations = await response.json();\n            this.translations[lang] = translations;\n            this.isLoaded = true;\n        } catch (error) {\n            console.error('Failed to load translations for', lang, error);\n            // Fallback to English if current language fails\n            if (lang !== 'en') {\n                await this.loadTranslations('en');\n            }\n        }\n    }\n\n    setupLanguageSelector() {\n        const selector = document.getElementById('languageSelector');\n        if (selector) {\n            selector.value = this.currentLang;\n            selector.addEventListener('change', (e) => {\n                this.switchLanguage(e.target.value);\n            });\n        }\n    }\n\n    async switchLanguage(lang) {\n        if (lang === this.currentLang) return;\n        \n        this.currentLang = lang;\n        localStorage.setItem('lang', lang);\n        \n        // Load translations if not already loaded\n        if (!this.translations[lang]) {\n            await this.loadTranslations(lang);\n        }\n        \n        this.updatePageLanguage();\n        this.applyTranslations();\n        \n        // Update language selector in case there are multiple on page\n        const selectors = document.querySelectorAll('#languageSelector');\n        selectors.forEach(selector => {\n            selector.value = lang;\n        });\n    }\n\n    updatePageLanguage() {\n        // Update HTML lang attribute\n        document.documentElement.lang = this.currentLang;\n        \n        // Update page direction for RTL languages (Arabic, Hebrew, etc.)\n        const rtlLanguages = ['ar', 'he', 'ur'];\n        if (rtlLanguages.includes(this.currentLang)) {\n            document.documentElement.dir = 'rtl';\n        } else {\n            document.documentElement.dir = 'ltr';\n        }\n        \n        // Update meta description if available\n        const metaDesc = document.querySelector('meta[name=\"description\"]');\n        if (metaDesc && this.translations[this.currentLang]?.meta?.description) {\n            metaDesc.content = this.translations[this.currentLang].meta.description;\n        }\n    }\n\n    applyTranslations() {\n        if (!this.isLoaded || !this.translations[this.currentLang]) return;\n\n        // Apply translations to elements with data-i18n attribute\n        const elements = document.querySelectorAll('[data-i18n]');\n        elements.forEach(element => {\n            const key = element.getAttribute('data-i18n');\n            const translation = this.getTranslation(key);\n            if (translation) {\n                element.textContent = translation;\n            }\n        });\n\n        // Apply translations to placeholder attributes\n        const placeholderElements = document.querySelectorAll('[data-i18n-placeholder]');\n        placeholderElements.forEach(element => {\n            const key = element.getAttribute('data-i18n-placeholder');\n            const translation = this.getTranslation(key);\n            if (translation) {\n                element.placeholder = translation;\n            }\n        });\n\n        // Apply translations to title attributes\n        const titleElements = document.querySelectorAll('[data-i18n-title]');\n        titleElements.forEach(element => {\n            const key = element.getAttribute('data-i18n-title');\n            const translation = this.getTranslation(key);\n            if (translation) {\n                element.title = translation;\n            }\n        });\n    }\n\n    getTranslation(key) {\n        const keys = key.split('.');\n        let translation = this.translations[this.currentLang];\n        \n        for (const k of keys) {\n            if (translation && translation[k]) {\n                translation = translation[k];\n            } else {\n                return null;\n            }\n        }\n        \n        return translation;\n    }\n\n    // Template string replacement for SMS and dynamic content\n    formatTemplate(template, variables = {}) {\n        return template.replace(/\\{\\{(\\w+)\\}\\}/g, (match, key) => {\n            return variables[key] || match;\n        });\n    }\n\n    // Get current language\n    getCurrentLanguage() {\n        return this.currentLang;\n    }\n\n    // Check if language is RTL\n    isRTL() {\n        const rtlLanguages = ['ar', 'he', 'ur'];\n        return rtlLanguages.includes(this.currentLang);\n    }\n}\n\n// Initialize i18n when DOM is loaded\nlet i18nManager;\ndocument.addEventListener('DOMContentLoaded', () => {\n    i18nManager = new I18nManager();\n});\n\n// Export for use in other modules\nwindow.i18nManager = i18nManager;","size_bytes":5130},"js/knowledge.js":{"content":"// Knowledge page functionality for tabs and FAQ search\nclass KnowledgeManager {\n    constructor() {\n        this.currentTab = 'status-checker';\n        this.faqs = [];\n        this.init();\n    }\n\n    init() {\n        this.setupTabNavigation();\n        this.loadFAQs();\n        this.setupFAQSearch();\n        this.setupStatusChecker();\n    }\n\n    setupTabNavigation() {\n        const tabButtons = document.querySelectorAll('.tab-button');\n        const tabPanels = document.querySelectorAll('.tab-panel');\n\n        tabButtons.forEach(button => {\n            button.addEventListener('click', (e) => {\n                e.preventDefault();\n                \n                const targetTab = button.getAttribute('data-tab');\n                \n                // Update active button\n                tabButtons.forEach(btn => btn.classList.remove('active'));\n                button.classList.add('active');\n                \n                // Update active panel\n                tabPanels.forEach(panel => panel.classList.remove('active'));\n                const targetPanel = document.getElementById(targetTab);\n                if (targetPanel) {\n                    targetPanel.classList.add('active');\n                }\n                \n                this.currentTab = targetTab;\n                \n                // Load tab-specific content\n                if (targetTab === 'myths-faqs') {\n                    this.renderFAQs();\n                }\n            });\n        });\n    }\n\n    async loadFAQs() {\n        try {\n            // Try to load from data file\n            const response = await fetch('data/faqs.json');\n            if (response.ok) {\n                this.faqs = await response.json();\n            } else {\n                // Fallback to inline FAQs\n                this.faqs = this.getDefaultFAQs();\n            }\n        } catch (error) {\n            console.error('Failed to load FAQs:', error);\n            this.faqs = this.getDefaultFAQs();\n        }\n    }\n\n    getDefaultFAQs() {\n        return [\n            {\n                id: 1,\n                category: \"dbt\",\n                question: {\n                    en: \"What is DBT and how does it work?\",\n                    hi: \"DBT क्या है और यह कैसे काम करता है?\"\n                },\n                answer: {\n                    en: \"Direct Benefit Transfer (DBT) is a government initiative to transfer subsidies and benefits directly to beneficiary accounts. It eliminates intermediaries, reduces leakage, and ensures transparent delivery of benefits.\",\n                    hi: \"प्रत्यक्ष लाभ अंतरण (DBT) सरकार की एक पहल है जो सब्सिडी और लाभ सीधे लाभार्थी के खाते में स्थानांतरित करती है। यह बिचौलियों को हटाती है, रिसाव को कम करती है और लाभों की पारदर्शी डिलीवरी सुनिश्चित करती है।\"\n                },\n                tags: [\"dbt\", \"definition\", \"benefits\"]\n            },\n            {\n                id: 2,\n                category: \"seeding\",\n                question: {\n                    en: \"How do I check my Aadhaar seeding status?\",\n                    hi: \"मैं अपनी आधार सीडिंग स्थिति कैसे जांच सकता हूं?\"\n                },\n                answer: {\n                    en: \"You can check your Aadhaar seeding status through: 1) Your bank's online portal or mobile app, 2) NPCI Aadhaar Mapper portal, 3) Visiting your bank branch, 4) Calling bank customer service.\",\n                    hi: \"आप अपनी आधार सीडिंग स्थिति इन तरीकों से जांच सकते हैं: 1) अपने बैंक के ऑनलाइन पोर्टल या मोबाइल ऐप से, 2) NPCI आधार मैपर पोर्टल से, 3) अपनी बैंक शाखा जाकर, 4) बैंक कस्टमर सर्विस को फोन करके।\"\n                },\n                tags: [\"seeding\", \"status\", \"check\"]\n            },\n            {\n                id: 3,\n                category: \"scholarship\",\n                question: {\n                    en: \"What documents are required for scholarship application?\",\n                    hi: \"छात्रवृत्ति आवेदन के लिए कौन से दस्तावेज आवश्यक हैं?\"\n                },\n                answer: {\n                    en: \"Required documents: 1) Aadhaar card, 2) Caste certificate (SC), 3) Income certificate, 4) Bank account details with IFSC code, 5) Educational certificates/marksheets, 6) Fee receipt from institution, 7) Passport size photograph, 8) Institution verification form.\",\n                    hi: \"आवश्यक दस्तावेज: 1) आधार कार्ड, 2) जाति प्रमाण पत्र (SC), 3) आय प्रमाण पत्र, 4) IFSC कोड के साथ बैंक खाता विवरण, 5) शैक्षिक प्रमाण पत्र/मार्कशीट, 6) संस्थान से फीस रसीद, 7) पासपोर्ट साइज फोटो, 8) संस्थान सत्यापन फॉर्म।\"\n                },\n                tags: [\"documents\", \"application\", \"requirements\"]\n            },\n            {\n                id: 4,\n                category: \"eligibility\",\n                question: {\n                    en: \"What is the income criteria for SC scholarships?\",\n                    hi: \"SC छात्रवृत्ति के लिए आय मापदंड क्या है?\"\n                },\n                answer: {\n                    en: \"For Pre-Matric (Class 9-10): Family income should not exceed ₹2.5 lakh per annum. For Post-Matric (Class 11+): Family income should not exceed ₹2.5 lakh per annum. Income certificate from competent authority is mandatory.\",\n                    hi: \"प्री-मैट्रिक (कक्षा 9-10) के लिए: पारिवारिक आय प्रति वर्ष ₹2.5 लाख से अधिक नहीं होनी चाहिए। पोस्ट-मैट्रिक (कक्षा 11+) के लिए: पारिवारिक आय प्रति वर्ष ₹2.5 लाख से अधिक नहीं होनी चाहिए। सक्षम प्राधिकारी से आय प्रमाण पत्र अनिवार्य है।\"\n                },\n                tags: [\"eligibility\", \"income\", \"criteria\"]\n            },\n            {\n                id: 5,\n                category: \"technical\",\n                question: {\n                    en: \"What to do if scholarship portal is not working?\",\n                    hi: \"यदि छात्रवृत्ति पोर्टल काम नहीं कर रहा है तो क्या करें?\"\n                },\n                answer: {\n                    en: \"If portal is not working: 1) Clear browser cache and cookies, 2) Try different browser (Chrome, Firefox, Edge), 3) Check internet connectivity, 4) Try after some time during non-peak hours, 5) Contact helpdesk: 1800-11-1111, 6) Use nearby CSC center for assistance.\",\n                    hi: \"यदि पोर्टल काम नहीं कर रहा है: 1) ब्राउज़र कैश और कुकीज़ साफ़ करें, 2) अलग ब्राउज़र आज़माएं (Chrome, Firefox, Edge), 3) इंटरनेट कनेक्टिविटी जांचें, 4) गैर-पीक घंटों में कुछ समय बाद कोशिश करें, 5) हेल्पडेस्क से संपर्क करें: 1800-11-1111, 6) सहायता के लिए नजदीकी CSC केंद्र का उपयोग करें।\"\n                },\n                tags: [\"technical\", \"portal\", \"troubleshooting\"]\n            }\n        ];\n    }\n\n    renderFAQs() {\n        const accordion = document.getElementById('faqAccordion');\n        if (!accordion) return;\n\n        const lang = window.i18nManager ? window.i18nManager.getCurrentLanguage() : 'en';\n        \n        accordion.innerHTML = this.faqs.map(faq => `\n            <div class=\"faq-item\" data-faq-id=\"${faq.id}\">\n                <div class=\"faq-question\" data-faq=\"${faq.id}\">\n                    <span>${faq.question[lang] || faq.question.en}</span>\n                    <span class=\"faq-icon\">+</span>\n                </div>\n                <div class=\"faq-answer\" data-faq-answer=\"${faq.id}\">\n                    <p>${faq.answer[lang] || faq.answer.en}</p>\n                </div>\n            </div>\n        `).join('');\n\n        // Setup FAQ interactions\n        this.setupFAQInteractions();\n    }\n\n    setupFAQInteractions() {\n        const faqQuestions = document.querySelectorAll('.faq-question');\n        faqQuestions.forEach(question => {\n            question.addEventListener('click', () => {\n                const faqId = question.getAttribute('data-faq');\n                const answer = document.querySelector(`[data-faq-answer=\"${faqId}\"]`);\n                const icon = question.querySelector('.faq-icon');\n                \n                if (answer.classList.contains('active')) {\n                    answer.classList.remove('active');\n                    question.classList.remove('active');\n                    icon.textContent = '+';\n                } else {\n                    // Close all other FAQs\n                    document.querySelectorAll('.faq-answer.active').forEach(a => a.classList.remove('active'));\n                    document.querySelectorAll('.faq-question.active').forEach(q => q.classList.remove('active'));\n                    document.querySelectorAll('.faq-icon').forEach(i => i.textContent = '+');\n                    \n                    // Open current FAQ\n                    answer.classList.add('active');\n                    question.classList.add('active');\n                    icon.textContent = '-';\n                }\n            });\n        });\n    }\n\n    setupFAQSearch() {\n        const searchInput = document.getElementById('faqSearch');\n        if (!searchInput) return;\n\n        searchInput.addEventListener('input', (e) => {\n            const searchTerm = e.target.value.toLowerCase();\n            this.filterFAQs(searchTerm);\n        });\n    }\n\n    filterFAQs(searchTerm) {\n        const faqItems = document.querySelectorAll('.faq-item');\n        const lang = window.i18nManager ? window.i18nManager.getCurrentLanguage() : 'en';\n\n        faqItems.forEach(item => {\n            const faqId = parseInt(item.getAttribute('data-faq-id'));\n            const faq = this.faqs.find(f => f.id === faqId);\n            \n            if (!faq) {\n                item.style.display = 'none';\n                return;\n            }\n\n            const question = (faq.question[lang] || faq.question.en).toLowerCase();\n            const answer = (faq.answer[lang] || faq.answer.en).toLowerCase();\n            const tags = faq.tags.join(' ').toLowerCase();\n\n            const matches = !searchTerm || \n                          question.includes(searchTerm) || \n                          answer.includes(searchTerm) || \n                          tags.includes(searchTerm);\n\n            item.style.display = matches ? 'block' : 'none';\n        });\n    }\n\n    setupStatusChecker() {\n        const aadhaarInput = document.getElementById('aadhaarInput');\n        const checkStatusBtn = document.getElementById('checkStatusBtn');\n        const statusResult = document.getElementById('statusResult');\n        const downloadReport = document.getElementById('downloadReport');\n        const proceedToGuide = document.getElementById('proceedToGuide');\n\n        if (!aadhaarInput || !checkStatusBtn) return;\n\n        // Format Aadhaar input as user types\n        aadhaarInput.addEventListener('input', (e) => {\n            let value = e.target.value.replace(/\\s/g, '').replace(/\\D/g, '');\n            if (value.length > 12) value = value.slice(0, 12);\n            \n            // Format with spaces: XXXX XXXX XXXX\n            const formatted = value.replace(/(\\d{4})(?=\\d)/g, '$1 ');\n            e.target.value = formatted;\n            \n            // Clear previous errors\n            this.clearError('aadhaarError');\n        });\n\n        // Check status button click\n        checkStatusBtn.addEventListener('click', () => {\n            this.checkAadhaarStatus();\n        });\n\n        // Download report functionality\n        if (downloadReport) {\n            downloadReport.addEventListener('click', () => {\n                this.downloadStatusReport();\n            });\n        }\n\n        // Proceed to guide functionality\n        if (proceedToGuide) {\n            proceedToGuide.addEventListener('click', () => {\n                window.location.href = 'procedure-guide.html';\n            });\n        }\n    }\n\n    checkAadhaarStatus() {\n        const aadhaarInput = document.getElementById('aadhaarInput');\n        const bankAccountInput = document.getElementById('bankAccount');\n        const statusResult = document.getElementById('statusResult');\n        const statusInfo = document.getElementById('statusInfo');\n        \n        const aadhaarNumber = aadhaarInput.value.replace(/\\s/g, '');\n        \n        // Validate Aadhaar number\n        if (!this.validateAadhaar(aadhaarNumber)) {\n            return;\n        }\n\n        // Show loading state\n        this.showLoading('checkStatusBtn');\n\n        // Simulate API call with delay\n        setTimeout(() => {\n            const mockStatus = this.generateMockStatus(aadhaarNumber, bankAccountInput.value);\n            this.displayStatusResult(mockStatus);\n            statusResult.style.display = 'block';\n            this.hideLoading('checkStatusBtn');\n        }, 2000);\n    }\n\n    validateAadhaar(aadhaarNumber) {\n        const errorElement = document.getElementById('aadhaarError');\n        \n        if (!aadhaarNumber) {\n            this.showError('aadhaarError', 'Aadhaar number is required');\n            return false;\n        }\n        \n        if (aadhaarNumber.length !== 12) {\n            this.showError('aadhaarError', 'Aadhaar number must be 12 digits');\n            return false;\n        }\n        \n        if (!/^\\d{12}$/.test(aadhaarNumber)) {\n            this.showError('aadhaarError', 'Aadhaar number should contain only digits');\n            return false;\n        }\n\n        return true;\n    }\n\n    generateMockStatus(aadhaarNumber, bankAccount) {\n        // Generate different statuses based on Aadhaar number for demo\n        const lastDigit = parseInt(aadhaarNumber.slice(-1));\n        const statusTypes = ['seeded', 'not_seeded', 'pending', 'mismatch'];\n        const statusType = statusTypes[lastDigit % 4];\n\n        const bankNames = ['State Bank of India', 'HDFC Bank', 'ICICI Bank', 'Punjab National Bank', 'Bank of Baroda'];\n        const randomBank = bankNames[lastDigit % bankNames.length];\n\n        const baseStatus = {\n            aadhaarNumber: aadhaarNumber.slice(0, 4) + ' XXXX XXXX',\n            bankAccount: bankAccount ? bankAccount.slice(0, 4) + 'XXXXXXXX' : null,\n            bankName: randomBank,\n            lastUpdated: new Date().toLocaleDateString('en-IN'),\n            scholarshipEligible: false\n        };\n\n        switch (statusType) {\n            case 'seeded':\n                return {\n                    ...baseStatus,\n                    status: 'seeded',\n                    statusText: 'Successfully Seeded',\n                    statusColor: 'success',\n                    scholarshipEligible: true,\n                    message: 'Your Aadhaar is successfully linked with your bank account. You are eligible for DBT scholarship transfers.',\n                    nextSteps: ['Apply for scholarship online', 'Keep your bank account active', 'Update any changes in bank details']\n                };\n            \n            case 'pending':\n                return {\n                    ...baseStatus,\n                    status: 'pending',\n                    statusText: 'Seeding Pending',\n                    statusColor: 'warning',\n                    message: 'Your Aadhaar seeding request is under process. It may take 2-3 working days to complete.',\n                    nextSteps: ['Wait for confirmation SMS', 'Check status after 3 days', 'Contact bank if delayed']\n                };\n            \n            case 'mismatch':\n                return {\n                    ...baseStatus,\n                    status: 'mismatch',\n                    statusText: 'Details Mismatch',\n                    statusColor: 'error',\n                    message: 'There is a mismatch in your Aadhaar details with bank records. Please visit your bank branch.',\n                    nextSteps: ['Visit bank branch with Aadhaar card', 'Verify and update details', 'Re-submit seeding request']\n                };\n            \n            default:\n                return {\n                    ...baseStatus,\n                    status: 'not_seeded',\n                    statusText: 'Not Seeded',\n                    statusColor: 'error',\n                    message: 'Your Aadhaar is not linked with any bank account. Please complete the seeding process.',\n                    nextSteps: ['Visit your bank branch', 'Submit Aadhaar seeding form', 'Follow our step-by-step guide']\n                };\n        }\n    }\n\n    displayStatusResult(status) {\n        const statusInfo = document.getElementById('statusInfo');\n        const lang = window.i18nManager ? window.i18nManager.getCurrentLanguage() : 'en';\n        \n        const statusHTML = `\n            <div class=\"status-summary ${status.statusColor}\">\n                <div class=\"status-badge\">\n                    <span class=\"status-icon\">${this.getStatusIcon(status.status)}</span>\n                    <span class=\"status-label\">${status.statusText}</span>\n                </div>\n                <div class=\"status-details\">\n                    <p><strong>Aadhaar:</strong> ${status.aadhaarNumber}</p>\n                    <p><strong>Bank:</strong> ${status.bankName}</p>\n                    ${status.bankAccount ? `<p><strong>Account:</strong> ${status.bankAccount}</p>` : ''}\n                    <p><strong>Last Updated:</strong> ${status.lastUpdated}</p>\n                    <p><strong>Scholarship Eligible:</strong> ${status.scholarshipEligible ? 'Yes' : 'No'}</p>\n                </div>\n            </div>\n            \n            <div class=\"status-message\">\n                <p>${status.message}</p>\n            </div>\n            \n            <div class=\"next-steps\">\n                <h5>Next Steps:</h5>\n                <ul>\n                    ${status.nextSteps.map(step => `<li>${step}</li>`).join('')}\n                </ul>\n            </div>\n        `;\n        \n        statusInfo.innerHTML = statusHTML;\n        \n        // Store status for report generation\n        this.currentStatus = status;\n    }\n\n    getStatusIcon(status) {\n        const icons = {\n            'seeded': '✅',\n            'pending': '⏳',\n            'not_seeded': '❌',\n            'mismatch': '⚠️'\n        };\n        return icons[status] || '❓';\n    }\n\n    downloadStatusReport() {\n        if (!this.currentStatus) return;\n\n        const reportContent = this.generateReportContent(this.currentStatus);\n        const blob = new Blob([reportContent], { type: 'text/plain' });\n        const url = window.URL.createObjectURL(blob);\n        \n        const a = document.createElement('a');\n        a.href = url;\n        a.download = `aadhaar-status-report-${Date.now()}.txt`;\n        document.body.appendChild(a);\n        a.click();\n        document.body.removeChild(a);\n        window.URL.revokeObjectURL(url);\n    }\n\n    generateReportContent(status) {\n        return `\nAADHAAR SEEDING STATUS REPORT\n==============================\n\nAadhaar Number: ${status.aadhaarNumber}\nBank Name: ${status.bankName}\nAccount Number: ${status.bankAccount || 'Not provided'}\nStatus: ${status.statusText}\nScholarship Eligible: ${status.scholarshipEligible ? 'Yes' : 'No'}\nLast Updated: ${status.lastUpdated}\n\nMessage: ${status.message}\n\nNext Steps:\n${status.nextSteps.map((step, index) => `${index + 1}. ${step}`).join('\\n')}\n\nThis report was generated on ${new Date().toLocaleString('en-IN')}\nFor assistance, call National Helpdesk: 1800-11-1111\n\nNote: This is an official status report for DBT scholarship scheme.\nKeep this report for your records.\n        `;\n    }\n\n    showError(elementId, message) {\n        const errorElement = document.getElementById(elementId);\n        if (errorElement) {\n            errorElement.textContent = message;\n            errorElement.style.display = 'block';\n        }\n    }\n\n    clearError(elementId) {\n        const errorElement = document.getElementById(elementId);\n        if (errorElement) {\n            errorElement.textContent = '';\n            errorElement.style.display = 'none';\n        }\n    }\n\n    showLoading(buttonId) {\n        const button = document.getElementById(buttonId);\n        if (button) {\n            button.disabled = true;\n            button.innerHTML = '<span class=\"loading-spinner\"></span> Checking...';\n        }\n    }\n\n    hideLoading(buttonId) {\n        const button = document.getElementById(buttonId);\n        if (button) {\n            button.disabled = false;\n            const lang = window.i18nManager ? window.i18nManager.getCurrentLanguage() : 'en';\n            button.innerHTML = lang === 'hi' ? 'स्थिति जांचें' : 'Check Status';\n        }\n    }\n}\n\n// Initialize knowledge manager when DOM is loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n    new KnowledgeManager();\n});","size_bytes":22238},"js/main.js":{"content":"// Main JavaScript functionality for the government website\nclass GovernmentWebsite {\n    constructor() {\n        this.init();\n    }\n\n    init() {\n        this.setupEventListeners();\n        this.loadDynamicContent();\n        this.setupAccessibility();\n    }\n\n    setupEventListeners() {\n        // Mobile menu toggle (if needed)\n        this.setupMobileMenu();\n        \n        // Smooth scrolling for anchor links\n        this.setupSmoothScrolling();\n        \n        // Form validations\n        this.setupFormValidations();\n        \n        // Modal handlers\n        this.setupModals();\n    }\n\n    setupMobileMenu() {\n        const mobileToggle = document.querySelector('.mobile-menu-toggle');\n        const navList = document.querySelector('.nav-list');\n        \n        if (mobileToggle && navList) {\n            mobileToggle.addEventListener('click', () => {\n                navList.classList.toggle('mobile-active');\n            });\n        }\n    }\n\n    setupSmoothScrolling() {\n        const links = document.querySelectorAll('a[href^=\"#\"]');\n        links.forEach(link => {\n            link.addEventListener('click', (e) => {\n                const targetId = link.getAttribute('href').substring(1);\n                const target = document.getElementById(targetId);\n                \n                if (target) {\n                    e.preventDefault();\n                    target.scrollIntoView({\n                        behavior: 'smooth',\n                        block: 'start'\n                    });\n                }\n            });\n        });\n    }\n\n    setupFormValidations() {\n        const forms = document.querySelectorAll('form');\n        forms.forEach(form => {\n            form.addEventListener('submit', (e) => {\n                if (!this.validateForm(form)) {\n                    e.preventDefault();\n                }\n            });\n        });\n    }\n\n    validateForm(form) {\n        let isValid = true;\n        const requiredFields = form.querySelectorAll('[required]');\n        \n        requiredFields.forEach(field => {\n            if (!field.value.trim()) {\n                this.showFieldError(field, 'This field is required');\n                isValid = false;\n            } else {\n                this.clearFieldError(field);\n            }\n        });\n\n        return isValid;\n    }\n\n    showFieldError(field, message) {\n        this.clearFieldError(field);\n        const errorDiv = document.createElement('div');\n        errorDiv.className = 'field-error';\n        errorDiv.textContent = message;\n        field.parentNode.insertBefore(errorDiv, field.nextSibling);\n        field.classList.add('error');\n    }\n\n    clearFieldError(field) {\n        const existingError = field.parentNode.querySelector('.field-error');\n        if (existingError) {\n            existingError.remove();\n        }\n        field.classList.remove('error');\n    }\n\n    setupModals() {\n        const modalTriggers = document.querySelectorAll('[data-modal]');\n        modalTriggers.forEach(trigger => {\n            trigger.addEventListener('click', (e) => {\n                e.preventDefault();\n                const modalId = trigger.getAttribute('data-modal');\n                this.openModal(modalId);\n            });\n        });\n\n        const modalCloses = document.querySelectorAll('.modal-close, .modal-overlay');\n        modalCloses.forEach(close => {\n            close.addEventListener('click', (e) => {\n                if (e.target === close) {\n                    this.closeModal();\n                }\n            });\n        });\n\n        // Close modal on escape key\n        document.addEventListener('keydown', (e) => {\n            if (e.key === 'Escape') {\n                this.closeModal();\n            }\n        });\n    }\n\n    openModal(modalId) {\n        const modal = document.getElementById(modalId);\n        if (modal) {\n            modal.classList.add('active');\n            document.body.style.overflow = 'hidden';\n        }\n    }\n\n    closeModal() {\n        const activeModal = document.querySelector('.modal.active');\n        if (activeModal) {\n            activeModal.classList.remove('active');\n            document.body.style.overflow = '';\n        }\n    }\n\n    loadDynamicContent() {\n        this.loadRecentUpdates();\n        this.loadFAQs();\n    }\n\n    async loadRecentUpdates() {\n        const container = document.getElementById('updatesCarousel');\n        if (!container) return;\n\n        try {\n            // Mock data for recent updates\n            const updates = [\n                {\n                    id: 1,\n                    date: '2025-01-15',\n                    title: { en: 'Scholarship disbursement completed for 50,000 students', hi: '50,000 छात्रों के लिए छात्रवृत्ति वितरण पूरा' },\n                    description: { en: 'Direct benefit transfer successful', hi: 'प्रत्यक्ष लाभ अंतरण सफल' }\n                },\n                {\n                    id: 2,\n                    date: '2025-01-10',\n                    title: { en: 'New online portal features launched', hi: 'नई ऑनलाइन पोर्टल सुविधाएं शुरू' },\n                    description: { en: 'Enhanced user experience', hi: 'बेहतर उपयोगकर्ता अनुभव' }\n                },\n                {\n                    id: 3,\n                    date: '2025-01-05',\n                    title: { en: 'Mobile app now supports 12 regional languages', hi: 'मोबाइल ऐप अब 12 क्षेत्रीय भाषाओं का समर्थन करता है' },\n                    description: { en: 'Better accessibility for rural students', hi: 'ग्रामीण छात्रों के लिए बेहतर पहुंच' }\n                }\n            ];\n\n            container.innerHTML = updates.map(update => `\n                <div class=\"update-item\">\n                    <div class=\"update-date\">${new Date(update.date).toLocaleDateString()}</div>\n                    <h4 data-i18n=\"updates.${update.id}.title\">${update.title.en}</h4>\n                    <p data-i18n=\"updates.${update.id}.desc\">${update.description.en}</p>\n                </div>\n            `).join('');\n\n            // Re-apply translations after loading content\n            if (window.i18nManager) {\n                window.i18nManager.applyTranslations();\n            }\n        } catch (error) {\n            console.error('Failed to load updates:', error);\n        }\n    }\n\n    async loadFAQs() {\n        const container = document.getElementById('faqAccordion');\n        if (!container) return;\n\n        try {\n            // Mock FAQ data\n            const faqs = [\n                {\n                    id: 1,\n                    question: { en: 'What is DBT?', hi: 'DBT क्या है?' },\n                    answer: { en: 'Direct Benefit Transfer is a government initiative to transfer subsidies directly to beneficiaries.', hi: 'प्रत्यक्ष लाभ अंतरण सरकार की एक पहल है जो सब्सिडी सीधे लाभार्थियों को स्थानांतरित करती है।' }\n                },\n                {\n                    id: 2,\n                    question: { en: 'How do I check my seeding status?', hi: 'मैं अपनी सीडिंग स्थिति कैसे जांच सकता हूं?' },\n                    answer: { en: 'You can check your seeding status on your bank\\'s online portal or visit the nearest branch.', hi: 'आप अपने बैंक के ऑनलाइन पोर्टल पर या निकटतम शाखा में जाकर अपनी सीडिंग स्थिति जांच सकते हैं।' }\n                }\n            ];\n\n            container.innerHTML = faqs.map(faq => `\n                <div class=\"faq-item\">\n                    <div class=\"faq-question\" data-faq=\"${faq.id}\">\n                        <span data-i18n=\"faqs.${faq.id}.question\">${faq.question.en}</span>\n                        <span class=\"faq-icon\">+</span>\n                    </div>\n                    <div class=\"faq-answer\" data-faq-answer=\"${faq.id}\">\n                        <p data-i18n=\"faqs.${faq.id}.answer\">${faq.answer.en}</p>\n                    </div>\n                </div>\n            `).join('');\n\n            // Setup FAQ interactions\n            this.setupFAQInteractions();\n\n            // Re-apply translations\n            if (window.i18nManager) {\n                window.i18nManager.applyTranslations();\n            }\n        } catch (error) {\n            console.error('Failed to load FAQs:', error);\n        }\n    }\n\n    setupFAQInteractions() {\n        const faqQuestions = document.querySelectorAll('.faq-question');\n        faqQuestions.forEach(question => {\n            question.addEventListener('click', () => {\n                const faqId = question.getAttribute('data-faq');\n                const answer = document.querySelector(`[data-faq-answer=\"${faqId}\"]`);\n                const icon = question.querySelector('.faq-icon');\n                \n                if (answer.classList.contains('active')) {\n                    answer.classList.remove('active');\n                    question.classList.remove('active');\n                    icon.textContent = '+';\n                } else {\n                    // Close all other FAQs\n                    document.querySelectorAll('.faq-answer.active').forEach(a => a.classList.remove('active'));\n                    document.querySelectorAll('.faq-question.active').forEach(q => q.classList.remove('active'));\n                    document.querySelectorAll('.faq-icon').forEach(i => i.textContent = '+');\n                    \n                    // Open current FAQ\n                    answer.classList.add('active');\n                    question.classList.add('active');\n                    icon.textContent = '-';\n                }\n            });\n        });\n    }\n\n    setupAccessibility() {\n        // Skip to main content link\n        this.addSkipLink();\n        \n        // Focus management\n        this.setupFocusManagement();\n        \n        // Keyboard navigation\n        this.setupKeyboardNavigation();\n    }\n\n    addSkipLink() {\n        const skipLink = document.createElement('a');\n        skipLink.href = '#main-content';\n        skipLink.className = 'skip-link';\n        skipLink.textContent = 'Skip to main content';\n        skipLink.style.cssText = `\n            position: absolute;\n            top: -40px;\n            left: 6px;\n            background: var(--gov-orange);\n            color: white;\n            padding: 8px;\n            text-decoration: none;\n            transition: top 0.3s;\n            z-index: 1000;\n        `;\n        \n        skipLink.addEventListener('focus', () => {\n            skipLink.style.top = '6px';\n        });\n        \n        skipLink.addEventListener('blur', () => {\n            skipLink.style.top = '-40px';\n        });\n        \n        document.body.insertBefore(skipLink, document.body.firstChild);\n    }\n\n    setupFocusManagement() {\n        // Ensure focus is visible\n        const focusableElements = 'button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])';\n        const elements = document.querySelectorAll(focusableElements);\n        \n        elements.forEach(element => {\n            element.addEventListener('focus', () => {\n                element.classList.add('focused');\n            });\n            \n            element.addEventListener('blur', () => {\n                element.classList.remove('focused');\n            });\n        });\n    }\n\n    setupKeyboardNavigation() {\n        // Arrow key navigation for tabs\n        const tabButtons = document.querySelectorAll('.tab-button');\n        if (tabButtons.length > 0) {\n            tabButtons.forEach((button, index) => {\n                button.addEventListener('keydown', (e) => {\n                    let newIndex = index;\n                    \n                    if (e.key === 'ArrowRight' || e.key === 'ArrowDown') {\n                        newIndex = (index + 1) % tabButtons.length;\n                    } else if (e.key === 'ArrowLeft' || e.key === 'ArrowUp') {\n                        newIndex = (index - 1 + tabButtons.length) % tabButtons.length;\n                    } else {\n                        return;\n                    }\n                    \n                    e.preventDefault();\n                    tabButtons[newIndex].focus();\n                    tabButtons[newIndex].click();\n                });\n            });\n        }\n    }\n\n    // Utility function to show loading state\n    showLoading(element) {\n        if (element) {\n            element.innerHTML = '<div class=\"loading\"></div>';\n        }\n    }\n\n    // Utility function to hide loading state\n    hideLoading(element, content) {\n        if (element) {\n            element.innerHTML = content || '';\n        }\n    }\n\n    // Utility function to format dates according to locale\n    formatDate(date, locale = 'en-IN') {\n        return new Date(date).toLocaleDateString(locale, {\n            year: 'numeric',\n            month: 'long',\n            day: 'numeric'\n        });\n    }\n\n    // Utility function to debounce search inputs\n    debounce(func, wait) {\n        let timeout;\n        return function executedFunction(...args) {\n            const later = () => {\n                clearTimeout(timeout);\n                func(...args);\n            };\n            clearTimeout(timeout);\n            timeout = setTimeout(later, wait);\n        };\n    }\n}\n\n// Initialize the main website functionality\ndocument.addEventListener('DOMContentLoaded', () => {\n    new GovernmentWebsite();\n});","size_bytes":13887},"js/procedure.js":{"content":"// Interactive Procedure Guide functionality\nclass ProcedureGuideManager {\n    constructor() {\n        this.currentCase = 'fresh';\n        this.currentStep = 1;\n        this.totalSteps = 5;\n        this.stepData = {};\n        this.checklist = [];\n        this.init();\n    }\n\n    init() {\n        this.loadStepData();\n        this.setupEventListeners();\n        this.loadCase(this.currentCase);\n    }\n\n    setupEventListeners() {\n        // Case selection buttons\n        const caseButtons = document.querySelectorAll('.case-btn');\n        caseButtons.forEach(button => {\n            button.addEventListener('click', (e) => {\n                const caseType = e.target.getAttribute('data-case');\n                this.selectCase(caseType);\n            });\n        });\n\n        // Navigation buttons\n        const prevBtn = document.getElementById('prevBtn');\n        const nextBtn = document.getElementById('nextBtn');\n        const startBtn = document.getElementById('startBtn');\n\n        if (prevBtn) {\n            prevBtn.addEventListener('click', () => this.previousStep());\n        }\n        if (nextBtn) {\n            nextBtn.addEventListener('click', () => this.nextStep());\n        }\n        if (startBtn) {\n            startBtn.addEventListener('click', () => this.startLearning());\n        }\n\n        // Modal handlers\n        this.setupModalHandlers();\n    }\n\n    loadStepData() {\n        this.stepData = {\n            fresh: {\n                title: { en: 'Fresh Aadhaar Seeding', hi: 'नई आधार सीडिंग' },\n                steps: [\n                    {\n                        title: { en: 'Visit Base Portal', hi: 'बेस पोर्टल पर जाएं' },\n                        content: { \n                            en: 'Go to your bank\\'s official website or visit the nearest branch to start the seeding process.',\n                            hi: 'आधार सीडिंग प्रक्रिया शुरू करने के लिए अपने बैंक की आधिकारिक वेबसाइट पर जाएं या निकटतम शाखा में जाएं।'\n                        },\n                        checklist: [\n                            { en: 'Identify your bank\\'s official website', hi: 'अपने बैंक की आधिकारिक वेबसाइट पहचानें' },\n                            { en: 'Locate Aadhaar seeding section', hi: 'आधार सीडिंग सेक्शन खोजें' },\n                            { en: 'Ensure secure connection (https)', hi: 'सुरक्षित कनेक्शन सुनिश्चित करें (https)' }\n                        ],\n                        action: 'portal'\n                    },\n                    {\n                        title: { en: 'Send Request', hi: 'अनुरोध भेजें' },\n                        content: { \n                            en: 'Fill out the online form or submit a physical application at the bank branch.',\n                            hi: 'ऑनलाइन फॉर्म भरें या बैंक शाखा में भौतिक आवेदन जमा करें।'\n                        },\n                        checklist: [\n                            { en: 'Download seeding form', hi: 'सीडिंग फॉर्म डाउनलोड करें' },\n                            { en: 'Read instructions carefully', hi: 'निर्देशों को ध्यान से पढ़ें' },\n                            { en: 'Prepare required documents', hi: 'आवश्यक दस्तावेज तैयार करें' }\n                        ],\n                        action: 'form'\n                    },\n                    {\n                        title: { en: 'Provide Aadhaar Details', hi: 'आधार विवरण प्रदान करें' },\n                        content: { \n                            en: 'Enter your 12-digit Aadhaar number carefully and verify all details.',\n                            hi: 'अपना 12-अंकीय आधार नंबर सावधानी से दर्ज करें और सभी विवरणों को सत्यापित करें।'\n                        },\n                        checklist: [\n                            { en: 'Enter Aadhaar number correctly', hi: 'आधार नंबर सही तरीके से दर्ज करें' },\n                            { en: 'Verify name matches Aadhaar', hi: 'नाम आधार से मेल खाता है सत्यापित करें' },\n                            { en: 'Check address details', hi: 'पता विवरण जांचें' }\n                        ],\n                        action: 'aadhaar'\n                    },\n                    {\n                        title: { en: 'Provide Bank Details', hi: 'बैंक विवरण प्रदान करें' },\n                        content: { \n                            en: 'Enter your bank account number and IFSC code accurately.',\n                            hi: 'अपना बैंक खाता संख्या और IFSC कोड सटीक रूप से दर्ज करें।'\n                        },\n                        checklist: [\n                            { en: 'Enter account number correctly', hi: 'खाता संख्या सही तरीके से दर्ज करें' },\n                            { en: 'Verify IFSC code', hi: 'IFSC कोड सत्यापित करें' },\n                            { en: 'Confirm account holder name', hi: 'खाता धारक का नाम पुष्टि करें' }\n                        ],\n                        action: 'bank'\n                    },\n                    {\n                        title: { en: 'Confirm & Submit', hi: 'पुष्टि करें और जमा करें' },\n                        content: { \n                            en: 'Review all information and submit your seeding request.',\n                            hi: 'सभी जानकारी की समीक्षा करें और अपना सीडिंग अनुरोध जमा करें।'\n                        },\n                        checklist: [\n                            { en: 'Review all entered details', hi: 'सभी दर्ज विवरणों की समीक्षा करें' },\n                            { en: 'Submit the application', hi: 'आवेदन जमा करें' },\n                            { en: 'Save confirmation receipt', hi: 'पुष्टि रसीद सेव करें' }\n                        ],\n                        action: 'confirm'\n                    }\n                ]\n            },\n            reseeding: {\n                title: { en: 'Aadhaar Re-Seeding', hi: 'आधार री-सीडिंग' },\n                steps: [\n                    {\n                        title: { en: 'Check Current Status', hi: 'वर्तमान स्थिति जांचें' },\n                        content: { \n                            en: 'First verify your current seeding status before proceeding with re-seeding.',\n                            hi: 'री-सीडिंग के साथ आगे बढ़ने से पहले अपनी वर्तमान सीडिंग स्थिति सत्यापित करें।'\n                        },\n                        checklist: [\n                            { en: 'Check seeding status online', hi: 'ऑनलाइन सीडिंग स्थिति जांचें' },\n                            { en: 'Identify the issue', hi: 'समस्या की पहचान करें' },\n                            { en: 'Gather updated documents', hi: 'अपडेटेड दस्तावेज इकट्ठा करें' }\n                        ],\n                        action: 'status'\n                    },\n                    {\n                        title: { en: 'Contact Bank Branch', hi: 'बैंक शाखा से संपर्क करें' },\n                        content: { \n                            en: 'Visit your bank branch or contact customer service to initiate re-seeding process.',\n                            hi: 'री-सीडिंग प्रक्रिया शुरू करने के लिए अपनी बैंक शाखा में जाएं या कस्टमर सर्विस से संपर्क करें।'\n                        },\n                        checklist: [\n                            { en: 'Visit nearest bank branch', hi: 'निकटतम बैंक शाखा में जाएं' },\n                            { en: 'Carry original Aadhaar card', hi: 'मूल आधार कार्ड ले जाएं' },\n                            { en: 'Explain the re-seeding requirement', hi: 'री-सीडिंग की आवश्यकता समझाएं' }\n                        ],\n                        action: 'form'\n                    },\n                    {\n                        title: { en: 'Verify Updated Details', hi: 'अपडेटेड विवरण सत्यापित करें' },\n                        content: { \n                            en: 'Provide updated Aadhaar details if any changes have been made.',\n                            hi: 'यदि कोई बदलाव किया गया है तो अपडेटेड आधार विवरण प्रदान करें।'\n                        },\n                        checklist: [\n                            { en: 'Check name spelling matches', hi: 'नाम की वर्तनी मेल खाती है जांचें' },\n                            { en: 'Verify address is current', hi: 'पता वर्तमान है सत्यापित करें' },\n                            { en: 'Confirm mobile number', hi: 'मोबाइल नंबर की पुष्टि करें' }\n                        ],\n                        action: 'aadhaar'\n                    },\n                    {\n                        title: { en: 'Re-verify Bank Details', hi: 'बैंक विवरण पुनः सत्यापित करें' },\n                        content: { \n                            en: 'Confirm your bank account details are correct and active.',\n                            hi: 'पुष्टि करें कि आपके बैंक खाते का विवरण सही और सक्रिय है।'\n                        },\n                        checklist: [\n                            { en: 'Account is active and operational', hi: 'खाता सक्रिय और परिचालित है' },\n                            { en: 'IFSC code is correct', hi: 'IFSC कोड सही है' },\n                            { en: 'Account holder name matches', hi: 'खाता धारक का नाम मेल खाता है' }\n                        ],\n                        action: 'bank'\n                    },\n                    {\n                        title: { en: 'Complete Re-Seeding', hi: 'री-सीडिंग पूरी करें' },\n                        content: { \n                            en: 'Submit the re-seeding application and track the status.',\n                            hi: 'री-सीडिंग आवेदन जमा करें और स्थिति ट्रैक करें।'\n                        },\n                        checklist: [\n                            { en: 'Submit re-seeding form', hi: 'री-सीडिंग फॉर्म जमा करें' },\n                            { en: 'Get acknowledgment receipt', hi: 'पावती रसीद प्राप्त करें' },\n                            { en: 'Track status regularly', hi: 'नियमित रूप से स्थिति ट्रैक करें' }\n                        ],\n                        action: 'confirm'\n                    }\n                ]\n            },\n            bankchange: {\n                title: { en: 'Bank Account Change', hi: 'बैंक खाता परिवर्तन' },\n                steps: [\n                    {\n                        title: { en: 'Prepare Documentation', hi: 'दस्तावेज तैयार करें' },\n                        content: { \n                            en: 'Gather all required documents for changing bank account details.',\n                            hi: 'बैंक खाता विवरण बदलने के लिए सभी आवश्यक दस्तावेज इकट्ठा करें।'\n                        },\n                        checklist: [\n                            { en: 'New bank account details', hi: 'नए बैंक खाते का विवरण' },\n                            { en: 'Account closure certificate (old bank)', hi: 'खाता बंद प्रमाण पत्र (पुराना बैंक)' },\n                            { en: 'New bank account proof', hi: 'नए बैंक खाते का प्रमाण' }\n                        ],\n                        action: 'documents'\n                    },\n                    {\n                        title: { en: 'Close Old Seeding', hi: 'पुराना सीडिंग बंद करें' },\n                        content: { \n                            en: 'Inform your old bank about closing the Aadhaar seeding link.',\n                            hi: 'आधार सीडिंग लिंक बंद करने के बारे में अपने पुराने बैंक को सूचित करें।'\n                        },\n                        checklist: [\n                            { en: 'Visit old bank branch', hi: 'पुराने बैंक शाखा में जाएं' },\n                            { en: 'Submit delink application', hi: 'डिलिंक आवेदन जमा करें' },\n                            { en: 'Get confirmation receipt', hi: 'पुष्टि रसीद प्राप्त करें' }\n                        ],\n                        action: 'form'\n                    },\n                    {\n                        title: { en: 'Update Aadhaar Information', hi: 'आधार जानकारी अपडेट करें' },\n                        content: { \n                            en: 'Ensure your Aadhaar details are current before linking to new bank.',\n                            hi: 'नए बैंक से लिंक करने से पहले सुनिश्चित करें कि आपका आधार विवरण वर्तमान है।'\n                        },\n                        checklist: [\n                            { en: 'Verify Aadhaar details are updated', hi: 'सत्यापित करें कि आधार विवरण अपडेटेड है' },\n                            { en: 'Check mobile number is linked', hi: 'जांचें कि मोबाइल नंबर लिंक है' },\n                            { en: 'Confirm address is current', hi: 'पुष्टि करें कि पता वर्तमान है' }\n                        ],\n                        action: 'aadhaar'\n                    },\n                    {\n                        title: { en: 'Link New Bank Account', hi: 'नया बैंक खाता लिंक करें' },\n                        content: { \n                            en: 'Visit your new bank to link Aadhaar with the new account.',\n                            hi: 'नए खाते के साथ आधार लिंक करने के लिए अपने नए बैंक में जाएं।'\n                        },\n                        checklist: [\n                            { en: 'Visit new bank branch', hi: 'नई बैंक शाखा में जाएं' },\n                            { en: 'Submit fresh seeding form', hi: 'नया सीडिंग फॉर्म जमा करें' },\n                            { en: 'Provide all required documents', hi: 'सभी आवश्यक दस्तावेज प्रदान करें' }\n                        ],\n                        action: 'bank'\n                    },\n                    {\n                        title: { en: 'Verify & Complete', hi: 'सत्यापित करें और पूरा करें' },\n                        content: { \n                            en: 'Confirm the bank change process is completed successfully.',\n                            hi: 'पुष्टि करें कि बैंक परिवर्तन प्रक्रिया सफलतापूर्वक पूरी हो गई है।'\n                        },\n                        checklist: [\n                            { en: 'Check new seeding status', hi: 'नई सीडिंग स्थिति जांचें' },\n                            { en: 'Test with small transaction', hi: 'छोटे लेनदेन के साथ परीक्षण करें' },\n                            { en: 'Update scholarship portal', hi: 'छात्रवृत्ति पोर्टल अपडेट करें' }\n                        ],\n                        action: 'confirm'\n                    }\n                ]\n            }\n        };\n    }\n\n    selectCase(caseType) {\n        this.currentCase = caseType;\n        \n        // Update active case button\n        const caseButtons = document.querySelectorAll('.case-btn');\n        caseButtons.forEach(btn => btn.classList.remove('active'));\n        document.querySelector(`[data-case=\"${caseType}\"]`).classList.add('active');\n        \n        this.loadCase(caseType);\n    }\n\n    loadCase(caseType) {\n        this.currentStep = 1;\n        this.checklist = [];\n        this.updateProgress();\n        this.displayStep();\n        this.updateNavigation();\n        this.updateChecklist();\n    }\n\n    startLearning() {\n        this.currentStep = 1;\n        this.displayStep();\n        this.updateProgress();\n        this.updateNavigation();\n        this.updateChecklist();\n    }\n\n    displayStep() {\n        const stepContent = document.getElementById('stepContent');\n        if (!stepContent) return;\n\n        const lang = window.i18nManager ? window.i18nManager.getCurrentLanguage() : 'en';\n        const caseData = this.stepData[this.currentCase];\n        const step = caseData.steps[this.currentStep - 1];\n\n        if (!step) return;\n\n        stepContent.innerHTML = this.generateStepContent(step, lang);\n        stepContent.classList.add('fade-in');\n        \n        // Remove animation class after animation completes\n        setTimeout(() => {\n            stepContent.classList.remove('fade-in');\n        }, 300);\n\n        // Setup step-specific interactions\n        this.setupStepInteractions(step.action);\n    }\n\n    generateStepContent(step, lang) {\n        const title = step.title[lang] || step.title.en;\n        const content = step.content[lang] || step.content.en;\n\n        switch (step.action) {\n            case 'portal':\n                return `\n                    <div class=\"step-portal\">\n                        <h3>${title}</h3>\n                        <p>${content}</p>\n                        <div class=\"portal-screenshot\">\n                            <div style=\"background: #f0f0f0; padding: 2rem; text-align: center; border: 1px solid #ddd;\">\n                                <h4>Bank Portal Screenshot</h4>\n                                <p>🏦 Bank Website Interface</p>\n                                <button class=\"portal-link\">Visit Portal</button>\n                            </div>\n                        </div>\n                        <div class=\"portal-instructions\">\n                            <h4>Instructions:</h4>\n                            <ol>\n                                <li>Look for \"Aadhaar Seeding\" or \"DBT\" section</li>\n                                <li>Click on \"Link Aadhaar\" or similar option</li>\n                                <li>Proceed to the application form</li>\n                            </ol>\n                        </div>\n                    </div>\n                `;\n            \n            case 'form':\n                return `\n                    <div class=\"step-form\">\n                        <h3>${title}</h3>\n                        <p>${content}</p>\n                        <div class=\"form-simulation\">\n                            <div class=\"sim-disclaimer\">This is a simulation for learning purposes</div>\n                            <div class=\"sim-form\">\n                                <h4>Aadhaar Seeding Request Form</h4>\n                                <div class=\"form-group\">\n                                    <label>Account Holder Name:</label>\n                                    <input type=\"text\" placeholder=\"Enter your full name\" disabled>\n                                </div>\n                                <div class=\"form-group\">\n                                    <label>Mobile Number:</label>\n                                    <input type=\"tel\" placeholder=\"+91-XXXXXXXXXX\" disabled>\n                                </div>\n                                <div class=\"form-group\">\n                                    <label>Email Address:</label>\n                                    <input type=\"email\" placeholder=\"your.email@example.com\" disabled>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                `;\n            \n            case 'aadhaar':\n                return `\n                    <div class=\"step-aadhaar\">\n                        <h3>${title}</h3>\n                        <p>${content}</p>\n                        <div class=\"form-simulation\">\n                            <div class=\"sim-disclaimer\">This is a simulation for learning purposes</div>\n                            <div class=\"sim-form\">\n                                <h4>Aadhaar Details</h4>\n                                <div class=\"form-group aadhaar-input\">\n                                    <label>Aadhaar Number (12 digits):</label>\n                                    <input type=\"text\" id=\"simulatedAadhaar\" placeholder=\"XXXX-XXXX-XXXX\" maxlength=\"14\">\n                                    <div class=\"format-hint\">Format: 1234-5678-9012</div>\n                                    <div class=\"validation-message\" id=\"aadhaarValidation\"></div>\n                                </div>\n                                <div class=\"form-group\">\n                                    <label>Name as per Aadhaar:</label>\n                                    <input type=\"text\" placeholder=\"Exactly as shown in Aadhaar\" disabled>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                `;\n            \n            case 'bank':\n                return `\n                    <div class=\"step-bank\">\n                        <h3>${title}</h3>\n                        <p>${content}</p>\n                        <div class=\"form-simulation\">\n                            <div class=\"sim-disclaimer\">This is a simulation for learning purposes</div>\n                            <div class=\"sim-form\">\n                                <h4>Bank Account Details</h4>\n                                <div class=\"bank-selection\">\n                                    <label>Select Your Bank:</label>\n                                    <div class=\"popular-banks\">\n                                        <div class=\"bank-option\" data-bank=\"sbi\">State Bank of India</div>\n                                        <div class=\"bank-option\" data-bank=\"hdfc\">HDFC Bank</div>\n                                        <div class=\"bank-option\" data-bank=\"icici\">ICICI Bank</div>\n                                        <div class=\"bank-option\" data-bank=\"pnb\">Punjab National Bank</div>\n                                    </div>\n                                </div>\n                                <div class=\"form-group\">\n                                    <label>Account Number:</label>\n                                    <input type=\"text\" id=\"simulatedAccount\" placeholder=\"Enter your account number\">\n                                </div>\n                                <div class=\"form-group ifsc-input\">\n                                    <label>IFSC Code:</label>\n                                    <input type=\"text\" id=\"simulatedIFSC\" placeholder=\"BANK0001234\" class=\"ifsc-format\">\n                                    <div class=\"format-hint\">Format: BANK0001234 (11 characters)</div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                `;\n            \n            case 'confirm':\n                return `\n                    <div class=\"step-confirm\">\n                        <h3>${title}</h3>\n                        <p>${content}</p>\n                        <div class=\"confirmation-summary\">\n                            <div class=\"summary-section\">\n                                <span class=\"summary-label\">Aadhaar Number:</span>\n                                <span class=\"summary-value\">XXXX-XXXX-1234</span>\n                            </div>\n                            <div class=\"summary-section\">\n                                <span class=\"summary-label\">Account Number:</span>\n                                <span class=\"summary-value\">XXXXXXXXX1234</span>\n                            </div>\n                            <div class=\"summary-section\">\n                                <span class=\"summary-label\">IFSC Code:</span>\n                                <span class=\"summary-value\">SBIN0001234</span>\n                            </div>\n                            <div class=\"summary-section\">\n                                <span class=\"summary-label\">Bank Name:</span>\n                                <span class=\"summary-value\">State Bank of India</span>\n                            </div>\n                        </div>\n                        <div class=\"simulation-result\">\n                            <div class=\"result-icon result-success\">✅</div>\n                            <div class=\"result-message\">Seeding Request Submitted Successfully!</div>\n                            <div class=\"result-details\">\n                                Your Aadhaar seeding request has been submitted. You will receive a confirmation SMS within 24 hours. \n                                The seeding process typically takes 2-3 working days to complete.\n                            </div>\n                        </div>\n                    </div>\n                `;\n            \n            default:\n                return `\n                    <div class=\"step-default\">\n                        <h3>${title}</h3>\n                        <p>${content}</p>\n                    </div>\n                `;\n        }\n    }\n\n    setupStepInteractions(action) {\n        switch (action) {\n            case 'aadhaar':\n                this.setupAadhaarValidation();\n                break;\n            case 'bank':\n                this.setupBankSelection();\n                break;\n        }\n    }\n\n    setupAadhaarValidation() {\n        const aadhaarInput = document.getElementById('simulatedAadhaar');\n        const validationDiv = document.getElementById('aadhaarValidation');\n        \n        if (aadhaarInput && validationDiv) {\n            aadhaarInput.addEventListener('input', (e) => {\n                let value = e.target.value.replace(/\\D/g, ''); // Remove non-digits\n                \n                // Format as XXXX-XXXX-XXXX\n                if (value.length > 8) {\n                    value = value.slice(0, 4) + '-' + value.slice(4, 8) + '-' + value.slice(8, 12);\n                } else if (value.length > 4) {\n                    value = value.slice(0, 4) + '-' + value.slice(4, 8);\n                }\n                \n                e.target.value = value;\n                \n                // Validate\n                const cleanValue = value.replace(/-/g, '');\n                if (cleanValue.length === 12) {\n                    validationDiv.className = 'validation-message success';\n                    validationDiv.textContent = '✓ Valid Aadhaar format';\n                    this.updateChecklistItem(2, true); // Mark Aadhaar entry as complete\n                } else if (cleanValue.length > 0) {\n                    validationDiv.className = 'validation-message error';\n                    validationDiv.textContent = '⚠ Aadhaar must be 12 digits';\n                    this.updateChecklistItem(2, false);\n                } else {\n                    validationDiv.textContent = '';\n                    this.updateChecklistItem(2, false);\n                }\n            });\n        }\n    }\n\n    setupBankSelection() {\n        const bankOptions = document.querySelectorAll('.bank-option');\n        bankOptions.forEach(option => {\n            option.addEventListener('click', () => {\n                bankOptions.forEach(opt => opt.classList.remove('selected'));\n                option.classList.add('selected');\n                \n                const bank = option.getAttribute('data-bank');\n                this.populateIFSC(bank);\n                this.updateChecklistItem(3, true); // Mark bank selection as complete\n            });\n        });\n    }\n\n    populateIFSC(bank) {\n        const ifscInput = document.getElementById('simulatedIFSC');\n        if (!ifscInput) return;\n\n        const ifscCodes = {\n            sbi: 'SBIN0001234',\n            hdfc: 'HDFC0001234',\n            icici: 'ICIC0001234',\n            pnb: 'PUNB0001234'\n        };\n\n        ifscInput.value = ifscCodes[bank] || '';\n    }\n\n    updateProgress() {\n        const progressFill = document.getElementById('progressFill');\n        const steps = document.querySelectorAll('.step');\n        \n        if (progressFill) {\n            const progress = (this.currentStep / this.totalSteps) * 100;\n            progressFill.style.width = `${progress}%`;\n        }\n\n        // Update step indicators\n        steps.forEach((step, index) => {\n            const stepNumber = index + 1;\n            step.classList.remove('active', 'completed');\n            \n            if (stepNumber < this.currentStep) {\n                step.classList.add('completed');\n            } else if (stepNumber === this.currentStep) {\n                step.classList.add('active');\n            }\n        });\n    }\n\n    updateNavigation() {\n        const prevBtn = document.getElementById('prevBtn');\n        const nextBtn = document.getElementById('nextBtn');\n        const startBtn = document.getElementById('startBtn');\n\n        if (prevBtn) {\n            prevBtn.disabled = this.currentStep <= 1;\n        }\n\n        if (nextBtn) {\n            nextBtn.style.display = this.currentStep < this.totalSteps ? 'inline-block' : 'none';\n        }\n\n        if (startBtn) {\n            startBtn.style.display = this.currentStep === this.totalSteps ? 'inline-block' : 'none';\n        }\n    }\n\n    updateChecklist() {\n        const checklistContainer = document.getElementById('actionChecklist');\n        if (!checklistContainer) return;\n\n        const lang = window.i18nManager ? window.i18nManager.getCurrentLanguage() : 'en';\n        const caseData = this.stepData[this.currentCase];\n        const step = caseData.steps[this.currentStep - 1];\n\n        if (!step || !step.checklist) return;\n\n        checklistContainer.innerHTML = step.checklist.map((item, index) => `\n            <li id=\"checklist-item-${index}\">\n                <div class=\"checklist-icon pending\">${index + 1}</div>\n                <span>${item[lang] || item.en}</span>\n            </li>\n        `).join('');\n    }\n\n    updateChecklistItem(index, completed) {\n        const item = document.getElementById(`checklist-item-${index}`);\n        if (item) {\n            const icon = item.querySelector('.checklist-icon');\n            if (completed) {\n                icon.classList.remove('pending');\n                icon.classList.add('completed', 'animate');\n                icon.textContent = '✓';\n            } else {\n                icon.classList.remove('completed', 'animate');\n                icon.classList.add('pending');\n                icon.textContent = index + 1;\n            }\n        }\n    }\n\n    previousStep() {\n        if (this.currentStep > 1) {\n            this.currentStep--;\n            this.displayStep();\n            this.updateProgress();\n            this.updateNavigation();\n            this.updateChecklist();\n        }\n    }\n\n    nextStep() {\n        if (this.currentStep < this.totalSteps) {\n            this.currentStep++;\n            this.displayStep();\n            this.updateProgress();\n            this.updateNavigation();\n            this.updateChecklist();\n        }\n    }\n\n    setupModalHandlers() {\n        const modal = document.getElementById('completionModal');\n        const goHomeBtn = document.getElementById('goHomeBtn');\n        const restartBtn = document.getElementById('restartBtn');\n\n        if (goHomeBtn) {\n            goHomeBtn.addEventListener('click', () => {\n                window.location.href = 'index.html';\n            });\n        }\n\n        if (restartBtn) {\n            restartBtn.addEventListener('click', () => {\n                this.restartGuide();\n            });\n        }\n\n        // Show completion modal when reaching final step\n        if (this.currentStep === this.totalSteps) {\n            setTimeout(() => {\n                if (modal) {\n                    modal.classList.add('active');\n                }\n            }, 2000);\n        }\n    }\n\n    restartGuide() {\n        this.currentStep = 1;\n        this.displayStep();\n        this.updateProgress();\n        this.updateNavigation();\n        this.updateChecklist();\n        \n        const modal = document.getElementById('completionModal');\n        if (modal) {\n            modal.classList.remove('active');\n        }\n    }\n}\n\n// Initialize procedure guide when DOM is loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n    new ProcedureGuideManager();\n});","size_bytes":35236},"js/quiz.js":{"content":"// Quiz functionality for government website\nclass QuizManager {\n    constructor() {\n        this.currentQuiz = null;\n        this.questions = [];\n        this.currentQuestionIndex = 0;\n        this.userAnswers = [];\n        this.score = 0;\n        this.quizData = this.getQuizData();\n        this.init();\n    }\n\n    init() {\n        this.setupEventListeners();\n        this.showQuizSelection();\n    }\n\n    setupEventListeners() {\n        // Quiz selection\n        const startQuizButtons = document.querySelectorAll('.start-quiz');\n        startQuizButtons.forEach(button => {\n            button.addEventListener('click', (e) => {\n                const quizType = e.target.getAttribute('data-quiz');\n                this.startQuiz(quizType);\n            });\n        });\n\n        // Navigation buttons\n        const prevBtn = document.getElementById('prevQuestion');\n        const nextBtn = document.getElementById('nextQuestion');\n        const submitBtn = document.getElementById('submitQuiz');\n\n        if (prevBtn) {\n            prevBtn.addEventListener('click', () => this.previousQuestion());\n        }\n        if (nextBtn) {\n            nextBtn.addEventListener('click', () => this.nextQuestion());\n        }\n        if (submitBtn) {\n            submitBtn.addEventListener('click', () => this.submitQuiz());\n        }\n\n        // Results buttons\n        const certificateBtn = document.getElementById('generateCertificate');\n        const retakeBtn = document.getElementById('retakeQuiz');\n        const backBtn = document.getElementById('backToSelection');\n\n        if (certificateBtn) {\n            certificateBtn.addEventListener('click', () => this.generateCertificate());\n        }\n        if (retakeBtn) {\n            retakeBtn.addEventListener('click', () => this.retakeQuiz());\n        }\n        if (backBtn) {\n            backBtn.addEventListener('click', () => this.showQuizSelection());\n        }\n    }\n\n    getQuizData() {\n        return {\n            'dbt-basics': {\n                title: { en: 'DBT Basics', hi: 'डीबीटी बेसिक्स' },\n                questions: [\n                    {\n                        question: { \n                            en: 'What does DBT stand for?', \n                            hi: 'DBT का पूरा नाम क्या है?' \n                        },\n                        options: {\n                            en: ['Direct Benefit Transfer', 'Digital Bank Transfer', 'Database Transaction', 'Digital Benefit Trust'],\n                            hi: ['प्रत्यक्ष लाभ अंतरण', 'डिजिटल बैंक ट्रांसफर', 'डेटाबेस लेनदेन', 'डिजिटल लाभ ट्रस्ट']\n                        },\n                        correct: 0,\n                        explanation: {\n                            en: 'DBT stands for Direct Benefit Transfer, a government initiative to transfer subsidies directly to beneficiaries.',\n                            hi: 'DBT का मतलब प्रत्यक्ष लाभ अंतरण है, यह सरकार की पहल है जो सब्सिडी सीधे लाभार्थियों को स्थानांतरित करती है।'\n                        }\n                    },\n                    {\n                        question: { \n                            en: 'What is the main advantage of DBT?', \n                            hi: 'DBT का मुख्य फायदा क्या है?' \n                        },\n                        options: {\n                            en: ['Eliminates middlemen', 'Increases paperwork', 'Reduces transparency', 'Makes process slower'],\n                            hi: ['बिचौलियों को खत्म करता है', 'कागजी कार्रवाई बढ़ाता है', 'पारदर्शिता कम करता है', 'प्रक्रिया को धीमा बनाता है']\n                        },\n                        correct: 0,\n                        explanation: {\n                            en: 'DBT eliminates middlemen, ensuring direct transfer of benefits to beneficiaries.',\n                            hi: 'DBT बिचौलियों को खत्म करता है, लाभार्थियों को सीधे लाभ पहुंचाने को सुनिश्चित करता है।'\n                        }\n                    },\n                    {\n                        question: { \n                            en: 'Which document is mandatory for receiving DBT benefits?', \n                            hi: 'DBT लाभ प्राप्त करने के लिए कौन सा दस्तावेज अनिवार्य है?' \n                        },\n                        options: {\n                            en: ['Aadhaar Card', 'Passport', 'Driving License', 'Voter ID'],\n                            hi: ['आधार कार्ड', 'पासपोर्ट', 'ड्राइविंग लाइसेंस', 'वोटर आईडी']\n                        },\n                        correct: 0,\n                        explanation: {\n                            en: 'Aadhaar Card is mandatory for DBT as it provides unique identification for benefit transfer.',\n                            hi: 'डीबीटी के लिए आधार कार्ड अनिवार्य है क्योंकि यह लाभ हस्तांतरण के लिए अद्वितीय पहचान प्रदान करता है।'\n                        }\n                    },\n                    {\n                        question: { \n                            en: 'DBT helps in reducing which of the following?', \n                            hi: 'DBT निम्नलिखित में से किसे कम करने में मदद करता है?' \n                        },\n                        options: {\n                            en: ['Leakages and corruption', 'Digital literacy', 'Bank accounts', 'Government schemes'],\n                            hi: ['रिसाव और भ्रष्टाचार', 'डिजिटल साक्षरता', 'बैंक खाते', 'सरकारी योजनाएं']\n                        },\n                        correct: 0,\n                        explanation: {\n                            en: 'DBT significantly reduces leakages and corruption by ensuring direct transfer to beneficiaries.',\n                            hi: 'DBT लाभार्थियों को सीधे हस्तांतरण सुनिश्चित करके रिसाव और भ्रष्टाचार को काफी कम करता है।'\n                        }\n                    },\n                    {\n                        question: { \n                            en: 'For successful DBT, what must be linked with your bank account?', \n                            hi: 'सफल DBT के लिए, आपके बैंक खाते के साथ क्या जुड़ा होना चाहिए?' \n                        },\n                        options: {\n                            en: ['Aadhaar number', 'PAN card', 'Mobile number only', 'Email address'],\n                            hi: ['आधार नंबर', 'पैन कार्ड', 'केवल मोबाइल नंबर', 'ईमेल पता']\n                        },\n                        correct: 0,\n                        explanation: {\n                            en: 'Your Aadhaar number must be linked with your bank account for successful DBT transfers.',\n                            hi: 'सफल DBT ट्रांसफर के लिए आपका आधार नंबर आपके बैंक खाते से जुड़ा होना चाहिए।'\n                        }\n                    }\n                ]\n            },\n            'aadhaar-seeding': {\n                title: { en: 'Aadhaar Seeding', hi: 'आधार सीडिंग' },\n                questions: [\n                    {\n                        question: { \n                            en: 'What is Aadhaar seeding?', \n                            hi: 'आधार सीडिंग क्या है?' \n                        },\n                        options: {\n                            en: ['Linking Aadhaar with bank account', 'Creating new Aadhaar', 'Updating Aadhaar details', 'Cancelling Aadhaar'],\n                            hi: ['आधार को बैंक खाते से जोड़ना', 'नया आधार बनाना', 'आधार विवरण अपडेट करना', 'आधार रद्द करना']\n                        },\n                        correct: 0,\n                        explanation: {\n                            en: 'Aadhaar seeding is the process of linking your Aadhaar number with your bank account.',\n                            hi: 'आधार सीडिंग आपके आधार नंबर को आपके बैंक खाते से जोड़ने की प्रक्रिया है।'\n                        }\n                    },\n                    {\n                        question: { \n                            en: 'How many digits does an Aadhaar number have?', \n                            hi: 'आधार नंबर में कितने अंक होते हैं?' \n                        },\n                        options: {\n                            en: ['12 digits', '10 digits', '16 digits', '8 digits'],\n                            hi: ['12 अंक', '10 अंक', '16 अंक', '8 अंक']\n                        },\n                        correct: 0,\n                        explanation: {\n                            en: 'Aadhaar number is a unique 12-digit identification number issued by UIDAI.',\n                            hi: 'आधार नंबर UIDAI द्वारा जारी किया गया एक अद्वितीय 12-अंकीय पहचान संख्या है।'\n                        }\n                    },\n                    {\n                        question: { \n                            en: 'Where can you check your Aadhaar seeding status?', \n                            hi: 'आप अपना आधार सीडिंग स्टेटस कहाँ चेक कर सकते हैं?' \n                        },\n                        options: {\n                            en: ['Bank website or branch', 'Post office', 'Police station', 'Municipal office'],\n                            hi: ['बैंक वेबसाइट या शाखा', 'डाकघर', 'पुलिस स्टेशन', 'नगरपालिका कार्यालय']\n                        },\n                        correct: 0,\n                        explanation: {\n                            en: 'You can check your Aadhaar seeding status on your bank\\'s website or by visiting the branch.',\n                            hi: 'आप अपने बैंक की वेबसाइट पर या शाखा में जाकर अपना आधार सीडिंग स्टेटस चेक कर सकते हैं।'\n                        }\n                    },\n                    {\n                        question: { \n                            en: 'What is required along with Aadhaar for seeding?', \n                            hi: 'सीडिंग के लिए आधार के साथ और क्या आवश्यक है?' \n                        },\n                        options: {\n                            en: ['Bank account details', 'PAN card', 'Driving license', 'Voter ID'],\n                            hi: ['बैंक खाता विवरण', 'पैन कार्ड', 'ड्राइविंग लाइसेंस', 'वोटर आईडी']\n                        },\n                        correct: 0,\n                        explanation: {\n                            en: 'Bank account details including account number and IFSC code are required for Aadhaar seeding.',\n                            hi: 'आधार सीडिंग के लिए खाता संख्या और IFSC कोड सहित बैंक खाता विवरण आवश्यक है।'\n                        }\n                    },\n                    {\n                        question: { \n                            en: 'What happens if name in Aadhaar doesn\\'t match bank records?', \n                            hi: 'यदि आधार में नाम बैंक रिकॉर्ड से मेल नहीं खाता तो क्या होता है?' \n                        },\n                        options: {\n                            en: ['Seeding will fail', 'Seeding will succeed automatically', 'Bank will change the name', 'Nothing happens'],\n                            hi: ['सीडिंग असफल हो जाएगी', 'सीडिंग अपने आप सफल हो जाएगी', 'बैंक नाम बदल देगा', 'कुछ नहीं होता']\n                        },\n                        correct: 0,\n                        explanation: {\n                            en: 'If the name in Aadhaar doesn\\'t match bank records, the seeding process will fail and needs to be corrected.',\n                            hi: 'यदि आधार में नाम बैंक रिकॉर्ड से मेल नहीं खाता, तो सीडिंग प्रक्रिया असफल हो जाएगी और इसे सुधारना होगा।'\n                        }\n                    },\n                    {\n                        question: { \n                            en: 'How long does Aadhaar seeding typically take?', \n                            hi: 'आधार सीडिंग में आमतौर पर कितना समय लगता है?' \n                        },\n                        options: {\n                            en: ['2-3 working days', '1 hour', '1 week', '1 month'],\n                            hi: ['2-3 कार्य दिवस', '1 घंटा', '1 सप्ताह', '1 महीना']\n                        },\n                        correct: 0,\n                        explanation: {\n                            en: 'Aadhaar seeding typically takes 2-3 working days to complete after submission.',\n                            hi: 'आधार सीडिंग आमतौर पर जमा करने के बाद पूरी होने में 2-3 कार्य दिवस लगते हैं।'\n                        }\n                    }\n                ]\n            },\n            'scholarship-process': {\n                title: { en: 'Scholarship Application', hi: 'छात्रवृत्ति आवेदन' },\n                questions: [\n                    {\n                        question: { \n                            en: 'Which portal is used for scholarship applications?', \n                            hi: 'छात्रवृत्ति आवेदन के लिए कौन सा पोर्टल उपयोग किया जाता है?' \n                        },\n                        options: {\n                            en: ['National Scholarship Portal', 'Aadhaar Portal', 'Bank Portal', 'Education Portal'],\n                            hi: ['राष्ट्रीय छात्रवृत्ति पोर्टल', 'आधार पोर्टल', 'बैंक पोर्टल', 'शिक्षा पोर्टल']\n                        },\n                        correct: 0,\n                        explanation: {\n                            en: 'National Scholarship Portal (NSP) is the official portal for scholarship applications.',\n                            hi: 'राष्ट्रीय छात्रवृत्ति पोर्टल (NSP) छात्रवृत्ति आवेदन के लिए आधिकारिक पोर्टल है।'\n                        }\n                    },\n                    {\n                        question: { \n                            en: 'What is the minimum percentage required for most SC scholarships?', \n                            hi: 'अधिकांश SC छात्रवृत्ति के लिए न्यूनतम प्रतिशत क्या आवश्यक है?' \n                        },\n                        options: {\n                            en: ['50%', '60%', '70%', '75%'],\n                            hi: ['50%', '60%', '70%', '75%']\n                        },\n                        correct: 0,\n                        explanation: {\n                            en: 'Most SC scholarships require a minimum of 50% marks in the previous qualifying examination.',\n                            hi: 'अधिकांश SC छात्रवृत्ति के लिए पिछली योग्यता परीक्षा में न्यूनतम 50% अंक आवश्यक हैं।'\n                        }\n                    },\n                    {\n                        question: { \n                            en: 'Which document is mandatory for caste verification?', \n                            hi: 'जाति सत्यापन के लिए कौन सा दस्तावेज अनिवार्य है?' \n                        },\n                        options: {\n                            en: ['Caste Certificate', 'Income Certificate', 'Domicile Certificate', 'Birth Certificate'],\n                            hi: ['जाति प्रमाण पत्र', 'आय प्रमाण पत्र', 'निवास प्रमाण पत्र', 'जन्म प्रमाण पत्र']\n                        },\n                        correct: 0,\n                        explanation: {\n                            en: 'Valid Caste Certificate issued by competent authority is mandatory for SC scholarship verification.',\n                            hi: 'SC छात्रवृत्ति सत्यापन के लिए सक्षम प्राधिकारी द्वारा जारी वैध जाति प्रमाण पत्र अनिवार्य है।'\n                        }\n                    },\n                    {\n                        question: { \n                            en: 'What is the annual family income limit for most SC scholarships?', \n                            hi: 'अधिकांश SC छात्रवृत्ति के लिए वार्षिक पारिवारिक आय सीमा क्या है?' \n                        },\n                        options: {\n                            en: ['₹2.5 lakh', '₹5 lakh', '₹8 lakh', '₹10 lakh'],\n                            hi: ['₹2.5 लाख', '₹5 लाख', '₹8 लाख', '₹10 लाख']\n                        },\n                        correct: 0,\n                        explanation: {\n                            en: 'The annual family income limit for most SC scholarships is ₹2.5 lakh from all sources.',\n                            hi: 'अधिकांश SC छात्रवृत्ति के लिए सभी स्रोतों से वार्षिक पारिवारिक आय सीमा ₹2.5 लाख है।'\n                        }\n                    },\n                    {\n                        question: { \n                            en: 'When does the scholarship application period typically open?', \n                            hi: 'छात्रवृत्ति आवेदन अवधि आमतौर पर कब खुलती है?' \n                        },\n                        options: {\n                            en: ['July-August', 'January-February', 'October-November', 'April-May'],\n                            hi: ['जुलाई-अगस्त', 'जनवरी-फरवरी', 'अक्टूबर-नवंबर', 'अप्रैल-मई']\n                        },\n                        correct: 0,\n                        explanation: {\n                            en: 'The scholarship application period typically opens in July-August for the academic year.',\n                            hi: 'शैक्षणिक वर्ष के लिए छात्रवृत्ति आवेदन अवधि आमतौर पर जुलाई-अगस्त में खुलती है।'\n                        }\n                    },\n                    {\n                        question: { \n                            en: 'What happens if you don\\'t renew your scholarship annually?', \n                            hi: 'यदि आप अपनी छात्रवृत्ति का वार्षिक नवीनीकरण नहीं करते तो क्या होता है?' \n                        },\n                        options: {\n                            en: ['Scholarship gets discontinued', 'Automatic renewal', 'Grace period given', 'Nothing happens'],\n                            hi: ['छात्रवृत्ति बंद हो जाती है', 'स्वचालित नवीनीकरण', 'छूट अवधि मिलती है', 'कुछ नहीं होता']\n                        },\n                        correct: 0,\n                        explanation: {\n                            en: 'If you don\\'t renew your scholarship annually, it gets discontinued and you need to reapply.',\n                            hi: 'यदि आप अपनी छात्रवृत्ति का वार्षिक नवीनीकरण नहीं करते, तो यह बंद हो जाती है और आपको पुनः आवेदन करना होगा।'\n                        }\n                    },\n                    {\n                        question: { \n                            en: 'Which bank account type is recommended for scholarship?', \n                            hi: 'छात्रवृत्ति के लिए किस प्रकार का बैंक खाता अनुशंसित है?' \n                        },\n                        options: {\n                            en: ['Savings Account', 'Current Account', 'Fixed Deposit', 'Recurring Deposit'],\n                            hi: ['बचत खाता', 'चालू खाता', 'सावधि जमा', 'आवर्ती जमा']\n                        },\n                        correct: 0,\n                        explanation: {\n                            en: 'Savings account in the student\\'s name is recommended for receiving scholarship amounts.',\n                            hi: 'छात्रवृत्ति राशि प्राप्त करने के लिए छात्र के नाम पर बचत खाता अनुशंसित है।'\n                        }\n                    },\n                    {\n                        question: { \n                            en: 'How long after approval does scholarship amount typically credit?', \n                            hi: 'अप्रूवल के कितने समय बाद छात्रवृत्ति राशि आमतौर पर क्रेडिट होती है?' \n                        },\n                        options: {\n                            en: ['2-4 weeks', '2-3 days', '2-3 months', '6 months'],\n                            hi: ['2-4 सप्ताह', '2-3 दिन', '2-3 महीने', '6 महीने']\n                        },\n                        correct: 0,\n                        explanation: {\n                            en: 'After approval, scholarship amount typically credits to the account within 2-4 weeks.',\n                            hi: 'अप्रूवल के बाद, छात्रवृत्ति राशि आमतौर पर 2-4 सप्ताह के भीतर खाते में क्रेडिट हो जाती है।'\n                        }\n                    }\n                ]\n            }\n        };\n    }\n\n    startQuiz(quizType) {\n        this.currentQuiz = quizType;\n        this.questions = this.quizData[quizType].questions;\n        this.currentQuestionIndex = 0;\n        this.userAnswers = new Array(this.questions.length).fill(null);\n        this.score = 0;\n\n        this.hideAllSections();\n        document.getElementById('quizContainer').classList.remove('hidden');\n        \n        this.displayQuestion();\n        this.updateProgress();\n        this.updateNavigation();\n    }\n\n    hideAllSections() {\n        document.getElementById('quizSelection').classList.add('hidden');\n        document.getElementById('quizContainer').classList.add('hidden');\n        document.getElementById('quizResults').classList.add('hidden');\n    }\n\n    displayQuestion() {\n        const question = this.questions[this.currentQuestionIndex];\n        const lang = window.i18nManager ? window.i18nManager.getCurrentLanguage() : 'en';\n        \n        // Set quiz title\n        const quizTitle = document.getElementById('quizTitle');\n        if (quizTitle) {\n            quizTitle.textContent = this.quizData[this.currentQuiz].title[lang] || this.quizData[this.currentQuiz].title.en;\n        }\n\n        // Set question text\n        const questionText = document.getElementById('questionText');\n        if (questionText) {\n            questionText.textContent = question.question[lang] || question.question.en;\n        }\n\n        // Set options\n        const optionsContainer = document.getElementById('optionsContainer');\n        if (optionsContainer) {\n            optionsContainer.innerHTML = '';\n            const options = question.options[lang] || question.options.en;\n            \n            options.forEach((option, index) => {\n                const optionDiv = document.createElement('div');\n                optionDiv.className = 'option';\n                \n                const radio = document.createElement('input');\n                radio.type = 'radio';\n                radio.name = 'answer';\n                radio.value = index;\n                radio.id = `option${index}`;\n                radio.checked = this.userAnswers[this.currentQuestionIndex] === index;\n                \n                radio.addEventListener('change', () => {\n                    this.userAnswers[this.currentQuestionIndex] = parseInt(radio.value);\n                    this.updateNavigation();\n                });\n\n                const label = document.createElement('label');\n                label.htmlFor = `option${index}`;\n                label.textContent = option;\n\n                optionDiv.appendChild(radio);\n                optionDiv.appendChild(label);\n                optionsContainer.appendChild(optionDiv);\n            });\n        }\n    }\n\n    updateProgress() {\n        const currentQuestion = document.getElementById('currentQuestion');\n        const totalQuestions = document.getElementById('totalQuestions');\n        const progressFill = document.getElementById('quizProgress');\n\n        if (currentQuestion) {\n            currentQuestion.textContent = this.currentQuestionIndex + 1;\n        }\n        if (totalQuestions) {\n            totalQuestions.textContent = this.questions.length;\n        }\n        if (progressFill) {\n            const progress = ((this.currentQuestionIndex + 1) / this.questions.length) * 100;\n            progressFill.style.width = `${progress}%`;\n        }\n    }\n\n    updateNavigation() {\n        const prevBtn = document.getElementById('prevQuestion');\n        const nextBtn = document.getElementById('nextQuestion');\n        const submitBtn = document.getElementById('submitQuiz');\n\n        if (prevBtn) {\n            prevBtn.disabled = this.currentQuestionIndex === 0;\n        }\n\n        const hasAnswer = this.userAnswers[this.currentQuestionIndex] !== null;\n        const isLastQuestion = this.currentQuestionIndex === this.questions.length - 1;\n\n        if (nextBtn && submitBtn) {\n            if (isLastQuestion) {\n                nextBtn.style.display = 'none';\n                submitBtn.style.display = hasAnswer ? 'inline-block' : 'none';\n            } else {\n                nextBtn.style.display = hasAnswer ? 'inline-block' : 'none';\n                submitBtn.style.display = 'none';\n            }\n        }\n    }\n\n    previousQuestion() {\n        if (this.currentQuestionIndex > 0) {\n            this.currentQuestionIndex--;\n            this.displayQuestion();\n            this.updateProgress();\n            this.updateNavigation();\n        }\n    }\n\n    nextQuestion() {\n        if (this.currentQuestionIndex < this.questions.length - 1) {\n            this.currentQuestionIndex++;\n            this.displayQuestion();\n            this.updateProgress();\n            this.updateNavigation();\n        }\n    }\n\n    submitQuiz() {\n        // Calculate score\n        this.score = 0;\n        this.userAnswers.forEach((answer, index) => {\n            if (answer === this.questions[index].correct) {\n                this.score++;\n            }\n        });\n\n        this.showResults();\n    }\n\n    showResults() {\n        this.hideAllSections();\n        document.getElementById('quizResults').classList.remove('hidden');\n\n        const percentage = Math.round((this.score / this.questions.length) * 100);\n        \n        // Update score display\n        document.getElementById('scorePercentage').textContent = `${percentage}%`;\n        document.getElementById('correctCount').textContent = this.score;\n        document.getElementById('incorrectCount').textContent = this.questions.length - this.score;\n        document.getElementById('scorePercent').textContent = `${percentage}%`;\n\n        // Generate review\n        this.generateAnswerReview();\n    }\n\n    generateAnswerReview() {\n        const reviewContainer = document.getElementById('reviewContainer');\n        if (!reviewContainer) return;\n\n        const lang = window.i18nManager ? window.i18nManager.getCurrentLanguage() : 'en';\n        reviewContainer.innerHTML = '';\n\n        this.questions.forEach((question, index) => {\n            const reviewItem = document.createElement('div');\n            reviewItem.className = 'review-item';\n            \n            const userAnswer = this.userAnswers[index];\n            const isCorrect = userAnswer === question.correct;\n            const options = question.options[lang] || question.options.en;\n\n            reviewItem.innerHTML = `\n                <div class=\"review-question\">\n                    <h5>Question ${index + 1}: ${question.question[lang] || question.question.en}</h5>\n                </div>\n                <div class=\"review-answer ${isCorrect ? 'correct' : 'incorrect'}\">\n                    <strong>Your Answer:</strong> ${userAnswer !== null ? options[userAnswer] : 'Not answered'}\n                    ${!isCorrect ? `<br><strong>Correct Answer:</strong> ${options[question.correct]}` : ''}\n                </div>\n                <div class=\"review-explanation\">\n                    <strong>Explanation:</strong> ${question.explanation[lang] || question.explanation.en}\n                </div>\n            `;\n\n            reviewContainer.appendChild(reviewItem);\n        });\n    }\n\n    generateCertificate() {\n        const percentage = Math.round((this.score / this.questions.length) * 100);\n        const lang = window.i18nManager ? window.i18nManager.getCurrentLanguage() : 'en';\n        \n        if (percentage < 70) {\n            alert(lang === 'hi' \n                ? 'प्रमाण पत्र के लिए कम से कम 70% स्कोर आवश्यक है।' \n                : 'Minimum 70% score required for certificate.');\n            return;\n        }\n\n        // Create certificate using jsPDF\n        const { jsPDF } = window.jspdf;\n        const doc = new jsPDF();\n        \n        // Certificate content\n        const title = lang === 'hi' ? 'प्रमाण पत्र' : 'Certificate of Completion';\n        const subtitle = lang === 'hi' ? 'यह प्रमाणित करता है कि' : 'This certifies that';\n        const studentName = 'Student'; // In real app, would get from user input\n        const hasCompleted = lang === 'hi' ? 'ने सफलतापूर्वक पूरा किया है' : 'has successfully completed';\n        const quizTitle = this.quizData[this.currentQuiz].title[lang];\n        const scoreText = lang === 'hi' ? `स्कोर: ${percentage}%` : `Score: ${percentage}%`;\n        const date = new Date().toLocaleDateString(lang === 'hi' ? 'hi-IN' : 'en-IN');\n\n        // Add content to PDF\n        doc.setFontSize(24);\n        doc.text(title, 105, 30, { align: 'center' });\n        \n        doc.setFontSize(16);\n        doc.text(subtitle, 105, 60, { align: 'center' });\n        \n        doc.setFontSize(20);\n        doc.text(studentName, 105, 80, { align: 'center' });\n        \n        doc.setFontSize(16);\n        doc.text(hasCompleted, 105, 100, { align: 'center' });\n        \n        doc.setFontSize(18);\n        doc.text(quizTitle, 105, 120, { align: 'center' });\n        \n        doc.setFontSize(14);\n        doc.text(scoreText, 105, 140, { align: 'center' });\n        doc.text(date, 105, 160, { align: 'center' });\n        \n        doc.text('DBTGuide - Government of India', 105, 200, { align: 'center' });\n\n        // Save the PDF\n        doc.save(`certificate-${this.currentQuiz}-${Date.now()}.pdf`);\n    }\n\n    retakeQuiz() {\n        this.startQuiz(this.currentQuiz);\n    }\n\n    showQuizSelection() {\n        this.hideAllSections();\n        document.getElementById('quizSelection').classList.remove('hidden');\n        this.currentQuiz = null;\n    }\n}\n\n// Initialize quiz when DOM is loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n    new QuizManager();\n});","size_bytes":35048},"js/videos.js":{"content":"// Video tutorials page functionality\nclass VideoManager {\n    constructor() {\n        this.videos = [];\n        this.filteredVideos = [];\n        this.currentFilters = {\n            language: 'all',\n            category: 'all'\n        };\n        this.init();\n    }\n\n    init() {\n        this.loadVideos();\n        this.setupEventListeners();\n        this.renderVideos();\n    }\n\n    setupEventListeners() {\n        const languageFilter = document.getElementById('videoLanguageFilter');\n        const categoryFilter = document.getElementById('videoCategoryFilter');\n\n        if (languageFilter) {\n            languageFilter.addEventListener('change', (e) => {\n                this.currentFilters.language = e.target.value;\n                this.filterVideos();\n            });\n        }\n\n        if (categoryFilter) {\n            categoryFilter.addEventListener('change', (e) => {\n                this.currentFilters.category = e.target.value;\n                this.filterVideos();\n            });\n        }\n\n        // Modal handlers\n        this.setupModalHandlers();\n    }\n\n    loadVideos() {\n        // Mock video data - in real app would fetch from server or YouTube API\n        this.videos = [\n            {\n                id: 1,\n                title: {\n                    en: 'Complete Guide to Aadhaar Seeding',\n                    hi: 'आधार सीडिंग की पूरी गाइड'\n                },\n                description: {\n                    en: 'Step-by-step tutorial on how to link your Aadhaar with bank account for DBT benefits.',\n                    hi: 'DBT लाभों के लिए अपने आधार को बैंक खाते से लिंक करने के लिए चरणबद्ध ट्यूटोरियल।'\n                },\n                category: 'seeding',\n                language: 'en',\n                duration: '8:45',\n                thumbnail: '#',\n                videoUrl: '#',\n                views: 12500,\n                uploadDate: '2025-01-10',\n                tags: ['aadhaar', 'seeding', 'dbt', 'banking']\n            },\n            {\n                id: 2,\n                title: {\n                    en: 'आधार सीडिंग प्रक्रिया - हिंदी में',\n                    hi: 'आधार सीडिंग प्रक्रिया - हिंदी में'\n                },\n                description: {\n                    en: 'Complete Aadhaar seeding process explained in Hindi with practical examples.',\n                    hi: 'व्यावहारिक उदाहरणों के साथ हिंदी में आधार सीडिंग प्रक्रिया की पूरी व्याख्या।'\n                },\n                category: 'seeding',\n                language: 'hi',\n                duration: '10:30',\n                thumbnail: '#',\n                videoUrl: '#',\n                views: 18750,\n                uploadDate: '2025-01-08',\n                tags: ['आधार', 'सीडिंग', 'डीबीटी', 'बैंकिंग']\n            },\n            {\n                id: 3,\n                title: {\n                    en: 'How to Apply for SC Scholarship Online',\n                    hi: 'ऑनलाइन SC छात्रवृत्ति के लिए आवेदन कैसे करें'\n                },\n                description: {\n                    en: 'Complete tutorial on applying for SC scholarships through the National Scholarship Portal.',\n                    hi: 'राष्ट्रीय छात्रवृत्ति पोर्टल के माध्यम से SC छात्रवृत्ति के लिए आवेदन करने पर पूरा ट्यूटोरियल।'\n                },\n                category: 'application',\n                language: 'en',\n                duration: '15:20',\n                thumbnail: '#',\n                videoUrl: '#',\n                views: 25600,\n                uploadDate: '2025-01-05',\n                tags: ['scholarship', 'application', 'nsp', 'sc']\n            },\n            {\n                id: 4,\n                title: {\n                    en: 'Understanding DBT: Direct Benefit Transfer',\n                    hi: 'डीबीटी को समझना: प्रत्यक्ष लाभ अंतरण'\n                },\n                description: {\n                    en: 'Learn about Direct Benefit Transfer system and how it benefits scholarship recipients.',\n                    hi: 'प्रत्यक्ष लाभ अंतरण प्रणाली के बारे में जानें और यह छात्रवृत्ति प्राप्तकर्ताओं को कैसे लाभ पहुंचाती है।'\n                },\n                category: 'dbt',\n                language: 'en',\n                duration: '6:15',\n                thumbnail: '#',\n                videoUrl: '#',\n                views: 8900,\n                uploadDate: '2025-01-12',\n                tags: ['dbt', 'benefits', 'government', 'transfer']\n            },\n            {\n                id: 5,\n                title: {\n                    en: 'Common Problems and Solutions',\n                    hi: 'सामान्य समस्याएं और समाधान'\n                },\n                description: {\n                    en: 'Troubleshooting guide for common issues faced during scholarship application and seeding.',\n                    hi: 'छात्रवृत्ति आवेदन और सीडिंग के दौरान आने वाली सामान्य समस्याओं के लिए समस्या निवारण गाइड।'\n                },\n                category: 'troubleshooting',\n                language: 'hi',\n                duration: '12:45',\n                thumbnail: '#',\n                videoUrl: '#',\n                views: 15300,\n                uploadDate: '2025-01-03',\n                tags: ['problems', 'solutions', 'help', 'support']\n            },\n            {\n                id: 6,\n                title: {\n                    en: 'Bank Account Opening for Students',\n                    hi: 'छात्रों के लिए बैंक खाता खोलना'\n                },\n                description: {\n                    en: 'Guide on opening a bank account specifically for receiving scholarship benefits.',\n                    hi: 'छात्रवृत्ति लाभ प्राप्त करने के लिए विशेष रूप से बैंक खाता खोलने पर गाइड।'\n                },\n                category: 'application',\n                language: 'hi',\n                duration: '9:30',\n                thumbnail: '#',\n                videoUrl: '#',\n                views: 11200,\n                uploadDate: '2025-01-01',\n                tags: ['bank', 'account', 'students', 'scholarship']\n            }\n        ];\n\n        this.filteredVideos = [...this.videos];\n    }\n\n    filterVideos() {\n        this.filteredVideos = this.videos.filter(video => {\n            const languageMatch = this.currentFilters.language === 'all' || \n                                 video.language === this.currentFilters.language;\n            \n            const categoryMatch = this.currentFilters.category === 'all' || \n                                 video.category === this.currentFilters.category;\n\n            return languageMatch && categoryMatch;\n        });\n\n        this.renderVideos();\n    }\n\n    renderVideos() {\n        const videosGrid = document.getElementById('videosGrid');\n        if (!videosGrid) return;\n\n        if (this.filteredVideos.length === 0) {\n            videosGrid.innerHTML = `\n                <div class=\"no-videos\">\n                    <div class=\"no-videos-icon\">🎥</div>\n                    <p data-i18n=\"videos.noVideos\">No videos found matching your criteria</p>\n                </div>\n            `;\n            return;\n        }\n\n        videosGrid.innerHTML = this.filteredVideos.map(video => this.createVideoCard(video)).join('');\n        \n        // Re-apply translations\n        if (window.i18nManager) {\n            window.i18nManager.applyTranslations();\n        }\n\n        // Add event listeners to video cards\n        this.attachVideoEventListeners();\n    }\n\n    createVideoCard(video) {\n        const lang = window.i18nManager ? window.i18nManager.getCurrentLanguage() : 'en';\n        const title = video.title[lang] || video.title.en;\n        const description = video.description[lang] || video.description.en;\n\n        return `\n            <div class=\"video-card\" data-video-id=\"${video.id}\">\n                <div class=\"video-thumbnail\">\n                    <div class=\"thumbnail-placeholder\">\n                        <div class=\"play-icon\">▶️</div>\n                        <div class=\"video-duration\">${video.duration}</div>\n                    </div>\n                </div>\n                <div class=\"video-info\">\n                    <h4 class=\"video-title\">${title}</h4>\n                    <p class=\"video-description\">${description}</p>\n                    <div class=\"video-meta\">\n                        <div class=\"video-stats\">\n                            <span class=\"video-views\">${this.formatViews(video.views)} views</span>\n                            <span class=\"video-date\">${this.formatDate(video.uploadDate)}</span>\n                        </div>\n                        <div class=\"video-badges\">\n                            <span class=\"language-badge ${video.language}\">${video.language.toUpperCase()}</span>\n                            <span class=\"category-badge\">${this.getCategoryLabel(video.category, lang)}</span>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"video-actions\">\n                    <button class=\"btn btn-primary play-video\" data-video-id=\"${video.id}\" data-i18n=\"videos.watchVideo\">Watch Video</button>\n                </div>\n            </div>\n        `;\n    }\n\n    attachVideoEventListeners() {\n        const playButtons = document.querySelectorAll('.play-video');\n        const videoCards = document.querySelectorAll('.video-card');\n\n        playButtons.forEach(button => {\n            button.addEventListener('click', (e) => {\n                e.stopPropagation();\n                const videoId = parseInt(e.target.getAttribute('data-video-id'));\n                this.playVideo(videoId);\n            });\n        });\n\n        videoCards.forEach(card => {\n            card.addEventListener('click', (e) => {\n                if (!e.target.classList.contains('play-video')) {\n                    const videoId = parseInt(card.getAttribute('data-video-id'));\n                    this.playVideo(videoId);\n                }\n            });\n        });\n    }\n\n    playVideo(videoId) {\n        const video = this.videos.find(v => v.id === videoId);\n        if (!video) return;\n\n        const lang = window.i18nManager ? window.i18nManager.getCurrentLanguage() : 'en';\n        const title = video.title[lang] || video.title.en;\n        const description = video.description[lang] || video.description.en;\n\n        // Show video modal\n        const modal = document.getElementById('videoModal');\n        const videoTitle = document.getElementById('videoTitle');\n        const videoContainer = document.getElementById('videoContainer');\n        const videoDescription = document.getElementById('videoDescription');\n        const videoDuration = document.getElementById('videoDuration');\n        const videoLanguage = document.getElementById('videoLanguage');\n\n        if (modal && videoTitle && videoContainer) {\n            videoTitle.textContent = title;\n            \n            // Generate mock video player\n            videoContainer.innerHTML = this.generateVideoPlayer(video);\n            \n            if (videoDescription) {\n                videoDescription.textContent = description;\n            }\n            \n            if (videoDuration) {\n                videoDuration.textContent = video.duration;\n            }\n            \n            if (videoLanguage) {\n                videoLanguage.textContent = video.language.toUpperCase();\n            }\n            \n            modal.classList.add('active');\n            \n            // Increment view count (mock)\n            video.views++;\n        }\n    }\n\n    generateVideoPlayer(video) {\n        // In a real app, this would embed YouTube/Vimeo player\n        return `\n            <div class=\"mock-video-player\">\n                <div class=\"video-screen\">\n                    <div class=\"video-controls\">\n                        <div class=\"play-button\">▶️</div>\n                        <div class=\"video-title-overlay\">${video.title.en}</div>\n                    </div>\n                    <div class=\"video-progress\">\n                        <div class=\"progress-bar\">\n                            <div class=\"progress-fill\" style=\"width: 0%\"></div>\n                        </div>\n                        <div class=\"time-display\">0:00 / ${video.duration}</div>\n                    </div>\n                </div>\n                <div class=\"video-info-panel\">\n                    <p><strong>Note:</strong> This is a demonstration player. In the actual implementation, \n                    this would be replaced with a real video player (YouTube, Vimeo, or custom video hosting).</p>\n                    <p><strong>Video Content:</strong> ${video.description.en}</p>\n                    <div class=\"video-tags\">\n                        ${video.tags.map(tag => `<span class=\"tag\">${tag}</span>`).join('')}\n                    </div>\n                </div>\n            </div>\n        `;\n    }\n\n    setupModalHandlers() {\n        const modal = document.getElementById('videoModal');\n        const closeBtn = document.getElementById('videoClose');\n\n        if (closeBtn) {\n            closeBtn.addEventListener('click', () => {\n                this.closeVideoModal();\n            });\n        }\n\n        // Close modal on background click\n        if (modal) {\n            modal.addEventListener('click', (e) => {\n                if (e.target === modal) {\n                    this.closeVideoModal();\n                }\n            });\n        }\n\n        // Close modal on escape key\n        document.addEventListener('keydown', (e) => {\n            if (e.key === 'Escape') {\n                this.closeVideoModal();\n            }\n        });\n    }\n\n    closeVideoModal() {\n        const modal = document.getElementById('videoModal');\n        if (modal) {\n            modal.classList.remove('active');\n            \n            // Stop any playing video\n            const videoContainer = document.getElementById('videoContainer');\n            if (videoContainer) {\n                videoContainer.innerHTML = '';\n            }\n        }\n    }\n\n    getCategoryLabel(category, lang) {\n        const labels = {\n            seeding: { en: 'Aadhaar Seeding', hi: 'आधार सीडिंग' },\n            application: { en: 'Application', hi: 'आवेदन' },\n            dbt: { en: 'DBT Process', hi: 'डीबीटी प्रक्रिया' },\n            troubleshooting: { en: 'Troubleshooting', hi: 'समस्या निवारण' }\n        };\n        return labels[category] ? (labels[category][lang] || labels[category].en) : category;\n    }\n\n    formatViews(views) {\n        if (views >= 1000000) {\n            return Math.floor(views / 1000000) + 'M';\n        } else if (views >= 1000) {\n            return Math.floor(views / 1000) + 'K';\n        }\n        return views.toString();\n    }\n\n    formatDate(dateString) {\n        const date = new Date(dateString);\n        const now = new Date();\n        const diffTime = Math.abs(now - date);\n        const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));\n\n        if (diffDays === 0) {\n            return 'Today';\n        } else if (diffDays === 1) {\n            return 'Yesterday';\n        } else if (diffDays < 7) {\n            return `${diffDays} days ago`;\n        } else if (diffDays < 30) {\n            return `${Math.floor(diffDays / 7)} weeks ago`;\n        } else {\n            return date.toLocaleDateString('en-IN', { \n                year: 'numeric', \n                month: 'short', \n                day: 'numeric' \n            });\n        }\n    }\n\n    // Method to add new videos (for admin functionality)\n    addVideo(videoData) {\n        const newVideo = {\n            id: Date.now(),\n            ...videoData,\n            views: 0,\n            uploadDate: new Date().toISOString().split('T')[0]\n        };\n        \n        this.videos.unshift(newVideo);\n        this.filterVideos();\n        return newVideo;\n    }\n\n    // Method to get video statistics\n    getVideoStats() {\n        const stats = {\n            totalVideos: this.videos.length,\n            totalViews: this.videos.reduce((sum, video) => sum + video.views, 0),\n            byLanguage: {},\n            byCategory: {}\n        };\n\n        this.videos.forEach(video => {\n            stats.byLanguage[video.language] = (stats.byLanguage[video.language] || 0) + 1;\n            stats.byCategory[video.category] = (stats.byCategory[video.category] || 0) + 1;\n        });\n\n        return stats;\n    }\n}\n\n// Add CSS styles for video components\nconst videoStyles = document.createElement('style');\nvideoStyles.textContent = `\n    .videos-grid {\n        display: grid;\n        grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));\n        gap: var(--spacing-lg);\n        margin-top: var(--spacing-lg);\n    }\n    \n    .video-card {\n        background: var(--gov-white);\n        border: 1px solid var(--gov-medium-gray);\n        border-radius: var(--border-radius);\n        overflow: hidden;\n        box-shadow: var(--box-shadow);\n        transition: var(--transition);\n        cursor: pointer;\n    }\n    \n    .video-card:hover {\n        transform: translateY(-2px);\n        box-shadow: 0 4px 8px rgba(0,0,0,0.15);\n    }\n    \n    .video-thumbnail {\n        position: relative;\n        aspect-ratio: 16/9;\n        background: var(--gov-light-gray);\n        overflow: hidden;\n    }\n    \n    .thumbnail-placeholder {\n        width: 100%;\n        height: 100%;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        background: linear-gradient(45deg, #ddd, #eee);\n        position: relative;\n    }\n    \n    .play-icon {\n        font-size: 48px;\n        opacity: 0.8;\n    }\n    \n    .video-duration {\n        position: absolute;\n        bottom: 8px;\n        right: 8px;\n        background: rgba(0,0,0,0.8);\n        color: white;\n        padding: 2px 6px;\n        border-radius: 4px;\n        font-size: 12px;\n    }\n    \n    .video-info {\n        padding: var(--spacing-lg);\n    }\n    \n    .video-title {\n        font-size: var(--font-size-large);\n        margin-bottom: var(--spacing-sm);\n        color: var(--gov-blue);\n    }\n    \n    .video-description {\n        color: var(--gov-dark-gray);\n        margin-bottom: var(--spacing-md);\n        display: -webkit-box;\n        -webkit-line-clamp: 2;\n        -webkit-box-orient: vertical;\n        overflow: hidden;\n    }\n    \n    .video-meta {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        flex-wrap: wrap;\n        gap: var(--spacing-sm);\n    }\n    \n    .video-stats {\n        font-size: var(--font-size-small);\n        color: var(--gov-dark-gray);\n    }\n    \n    .video-badges {\n        display: flex;\n        gap: var(--spacing-xs);\n    }\n    \n    .language-badge, .category-badge {\n        padding: var(--spacing-xs) var(--spacing-sm);\n        border-radius: 12px;\n        font-size: var(--font-size-small);\n        font-weight: 600;\n    }\n    \n    .language-badge {\n        background: var(--gov-orange);\n        color: var(--gov-white);\n    }\n    \n    .category-badge {\n        background: var(--gov-light-gray);\n        color: var(--gov-text);\n    }\n    \n    .video-actions {\n        padding: 0 var(--spacing-lg) var(--spacing-lg);\n    }\n    \n    .mock-video-player {\n        width: 100%;\n        max-width: 800px;\n    }\n    \n    .video-screen {\n        aspect-ratio: 16/9;\n        background: #000;\n        position: relative;\n        border-radius: var(--border-radius);\n        overflow: hidden;\n    }\n    \n    .video-controls {\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        transform: translate(-50%, -50%);\n        text-align: center;\n        color: white;\n    }\n    \n    .video-progress {\n        position: absolute;\n        bottom: 0;\n        left: 0;\n        right: 0;\n        background: rgba(0,0,0,0.8);\n        padding: var(--spacing-sm);\n    }\n    \n    .video-info-panel {\n        padding: var(--spacing-lg);\n        background: var(--gov-light-gray);\n        margin-top: var(--spacing-md);\n        border-radius: var(--border-radius);\n    }\n    \n    .tag {\n        display: inline-block;\n        background: var(--gov-orange);\n        color: white;\n        padding: var(--spacing-xs) var(--spacing-sm);\n        border-radius: 12px;\n        font-size: var(--font-size-small);\n        margin-right: var(--spacing-xs);\n        margin-bottom: var(--spacing-xs);\n    }\n    \n    .video-filters {\n        display: flex;\n        gap: var(--spacing-lg);\n        margin-bottom: var(--spacing-xl);\n        flex-wrap: wrap;\n    }\n    \n    @media (max-width: 768px) {\n        .videos-grid {\n            grid-template-columns: 1fr;\n        }\n        \n        .video-filters {\n            flex-direction: column;\n            gap: var(--spacing-md);\n        }\n        \n        .video-meta {\n            flex-direction: column;\n            align-items: flex-start;\n        }\n    }\n`;\ndocument.head.appendChild(videoStyles);\n\n// Initialize video manager when DOM is loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n    new VideoManager();\n});","size_bytes":22226}},"version":1}